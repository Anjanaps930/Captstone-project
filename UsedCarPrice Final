{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1hV2_MzVdV_B4dgUppHLU0cua5hrQQed9",
      "authorship_tag": "ABX9TyN7ZERL8lmwMdLVoVKYcy+/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Anjanaps930/Captstone-project/blob/main/UsedCarPrice%20Final\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## My capstone project - Assignment\n",
        "* Used car price prediction challenge\n",
        "* Uses a kaggle Dataset"
      ],
      "metadata": {
        "id": "01S3ra-CjF4R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0L0IfOwynfSr",
        "outputId": "95ba8ca8-dffc-4379-f8da-52357126d2b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%cd /content/drive/MyDrive/Capstone project"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kV9g1A_gpytr",
        "outputId": "11ad9437-7597-44f3-a91d-81029c533e22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/Capstone project\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4SwVior-p2I7",
        "outputId": "de2db974-4be8-4dff-e681-b0414d2b4714"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataForML.pkl  Final_XGB_Model.pkl  train-data.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This Project is based on the Used Car price prediction data om Kaggle repositor\n",
        "(https://www.kaggle.com/datasets/avikasliwal/used-cars-price-prediction)\n",
        "* It contains the details of 6019 used cars in mumbai, pune and other locations.\n",
        "* My project task is to create a machine learning model which can predict the average price of used cars  of house based on its characteristics.\n",
        "* For solving this problem, I will approach the task, with a step by step approach to create a data analysis and prediction model based on\n",
        "(machine learning/AI algorithms, regression algorith for example) available from different Python packages, modules and classes.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "0ljuv_DU5tiD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "ruG2nvy2qX3S"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 1: Reading the data Reading the data with python"
      ],
      "metadata": {
        "id": "WQbCSxz3_cQR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Supressing the warning messages\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ],
      "metadata": {
        "id": "h1H5RL-NqYuO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Reading the dataset\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "UsedCarData=pd.read_csv('/content/drive/MyDrive/My capstone project/train-data.csv' , encoding='latin')\n",
        "print ('Shape before deleting duplicate values:', UsedCarData.shape)\n",
        "\n",
        "# Removing duplicate rows if any\n",
        "UsedCarData=UsedCarData.drop_duplicates()\n",
        "print('Shape After deleting duplicate values:', UsedCarData.shape)\n",
        "\n",
        "# print sample data\n",
        "# Start observing the Quantitatile/Categorical/Qualitative variables\n",
        "UsedCarData.head(10)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nuFHyApSqjSQ",
        "outputId": "f28455bd-3abe-46b4-f013-3c2e8df2cb57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape before deleting duplicate values: (6019, 14)\n",
            "Shape After deleting duplicate values: (6019, 14)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0                                 Name    Location  Year  \\\n",
              "0           0               Maruti Wagon R LXI CNG      Mumbai  2010   \n",
              "1           1     Hyundai Creta 1.6 CRDi SX Option        Pune  2015   \n",
              "2           2                         Honda Jazz V     Chennai  2011   \n",
              "3           3                    Maruti Ertiga VDI     Chennai  2012   \n",
              "4           4      Audi A4 New 2.0 TDI Multitronic  Coimbatore  2013   \n",
              "5           5      Hyundai EON LPG Era Plus Option   Hyderabad  2012   \n",
              "6           6               Nissan Micra Diesel XV      Jaipur  2013   \n",
              "7           7    Toyota Innova Crysta 2.8 GX AT 8S      Mumbai  2016   \n",
              "8           8  Volkswagen Vento Diesel Comfortline        Pune  2013   \n",
              "9           9       Tata Indica Vista Quadrajet LS     Chennai  2012   \n",
              "\n",
              "   Kilometers_Driven Fuel_Type Transmission Owner_Type     Mileage   Engine  \\\n",
              "0              72000       CNG       Manual      First  26.6 km/kg   998 CC   \n",
              "1              41000    Diesel       Manual      First  19.67 kmpl  1582 CC   \n",
              "2              46000    Petrol       Manual      First   18.2 kmpl  1199 CC   \n",
              "3              87000    Diesel       Manual      First  20.77 kmpl  1248 CC   \n",
              "4              40670    Diesel    Automatic     Second   15.2 kmpl  1968 CC   \n",
              "5              75000       LPG       Manual      First  21.1 km/kg   814 CC   \n",
              "6              86999    Diesel       Manual      First  23.08 kmpl  1461 CC   \n",
              "7              36000    Diesel    Automatic      First  11.36 kmpl  2755 CC   \n",
              "8              64430    Diesel       Manual      First  20.54 kmpl  1598 CC   \n",
              "9              65932    Diesel       Manual     Second   22.3 kmpl  1248 CC   \n",
              "\n",
              "       Power  Seats  New_Price  Price  \n",
              "0  58.16 bhp    5.0        NaN   1.75  \n",
              "1  126.2 bhp    5.0        NaN  12.50  \n",
              "2   88.7 bhp    5.0  8.61 Lakh   4.50  \n",
              "3  88.76 bhp    7.0        NaN   6.00  \n",
              "4  140.8 bhp    5.0        NaN  17.74  \n",
              "5   55.2 bhp    5.0        NaN   2.35  \n",
              "6   63.1 bhp    5.0        NaN   3.50  \n",
              "7  171.5 bhp    8.0    21 Lakh  17.50  \n",
              "8  103.6 bhp    5.0        NaN   5.20  \n",
              "9     74 bhp    5.0        NaN   1.95  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-797f2cb7-d6e0-484c-9cfb-271630bb5152\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Name</th>\n",
              "      <th>Location</th>\n",
              "      <th>Year</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_Price</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Maruti Wagon R LXI CNG</td>\n",
              "      <td>Mumbai</td>\n",
              "      <td>2010</td>\n",
              "      <td>72000</td>\n",
              "      <td>CNG</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>26.6 km/kg</td>\n",
              "      <td>998 CC</td>\n",
              "      <td>58.16 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyundai Creta 1.6 CRDi SX Option</td>\n",
              "      <td>Pune</td>\n",
              "      <td>2015</td>\n",
              "      <td>41000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.67 kmpl</td>\n",
              "      <td>1582 CC</td>\n",
              "      <td>126.2 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Honda Jazz V</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>2011</td>\n",
              "      <td>46000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>18.2 kmpl</td>\n",
              "      <td>1199 CC</td>\n",
              "      <td>88.7 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.61 Lakh</td>\n",
              "      <td>4.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Maruti Ertiga VDI</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>2012</td>\n",
              "      <td>87000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>20.77 kmpl</td>\n",
              "      <td>1248 CC</td>\n",
              "      <td>88.76 bhp</td>\n",
              "      <td>7.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Audi A4 New 2.0 TDI Multitronic</td>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>2013</td>\n",
              "      <td>40670</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>15.2 kmpl</td>\n",
              "      <td>1968 CC</td>\n",
              "      <td>140.8 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>Hyundai EON LPG Era Plus Option</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>2012</td>\n",
              "      <td>75000</td>\n",
              "      <td>LPG</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>21.1 km/kg</td>\n",
              "      <td>814 CC</td>\n",
              "      <td>55.2 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>Nissan Micra Diesel XV</td>\n",
              "      <td>Jaipur</td>\n",
              "      <td>2013</td>\n",
              "      <td>86999</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>23.08 kmpl</td>\n",
              "      <td>1461 CC</td>\n",
              "      <td>63.1 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7</td>\n",
              "      <td>Toyota Innova Crysta 2.8 GX AT 8S</td>\n",
              "      <td>Mumbai</td>\n",
              "      <td>2016</td>\n",
              "      <td>36000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>11.36 kmpl</td>\n",
              "      <td>2755 CC</td>\n",
              "      <td>171.5 bhp</td>\n",
              "      <td>8.0</td>\n",
              "      <td>21 Lakh</td>\n",
              "      <td>17.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8</td>\n",
              "      <td>Volkswagen Vento Diesel Comfortline</td>\n",
              "      <td>Pune</td>\n",
              "      <td>2013</td>\n",
              "      <td>64430</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>20.54 kmpl</td>\n",
              "      <td>1598 CC</td>\n",
              "      <td>103.6 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>9</td>\n",
              "      <td>Tata Indica Vista Quadrajet LS</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>2012</td>\n",
              "      <td>65932</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Second</td>\n",
              "      <td>22.3 kmpl</td>\n",
              "      <td>1248 CC</td>\n",
              "      <td>74 bhp</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-797f2cb7-d6e0-484c-9cfb-271630bb5152')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-797f2cb7-d6e0-484c-9cfb-271630bb5152 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-797f2cb7-d6e0-484c-9cfb-271630bb5152');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5574f8b1-4969-4123-b402-12fa004b7178\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5574f8b1-4969-4123-b402-12fa004b7178')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5574f8b1-4969-4123-b402-12fa004b7178 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "UsedCarData",
              "summary": "{\n  \"name\": \"UsedCarData\",\n  \"rows\": 6019,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1737,\n        \"min\": 0,\n        \"max\": 6018,\n        \"num_unique_values\": 6019,\n        \"samples\": [\n          2868,\n          5924,\n          3764\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1876,\n        \"samples\": [\n          \"Hyundai i20 1.2 Era\",\n          \"Toyota Corolla Altis GL MT\",\n          \"BMW 5 Series 2013-2017 520d Luxury Line\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Jaipur\",\n          \"Mumbai\",\n          \"Bangalore\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1998,\n        \"max\": 2019,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          2010,\n          2006,\n          2017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 91268,\n        \"min\": 171,\n        \"max\": 6500000,\n        \"num_unique_values\": 3093,\n        \"samples\": [\n          66484,\n          20364,\n          15134\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Diesel\",\n          \"Electric\",\n          \"Petrol\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Automatic\",\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Second\",\n          \"Third\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 442,\n        \"samples\": [\n          \"19.6 kmpl\",\n          \"14.6 kmpl\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"2967 CC\",\n          \"1978 CC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 372,\n        \"samples\": [\n          \"402 bhp\",\n          \"46.3 bhp\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8088395547482927,\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9.0,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_Price\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 540,\n        \"samples\": [\n          \"12.88 Lakh\",\n          \"14.84 Lakh\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.1879171124555,\n        \"min\": 0.44,\n        \"max\": 160.0,\n        \"num_unique_values\": 1373,\n        \"samples\": [\n          10.99,\n          45.86\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Key observations from Step 1 about Data Description\n",
        "\n",
        "* This file contails 6019 used car details from mumbai, pune and other parts of india.\n",
        "* There are 14 characteristics and they are listed below\n",
        "* Name: Represents the make and model of the car.\n",
        "* Location: Indicates the city where the car is located or listed for sale.\n",
        "* Year: Specifies the year of manufacture of the car.\n",
        "* Kilometers_Driven: Indicates the total distance (in kilometers) the car has been driven.\n",
        "* Fuel_Type: Specifies the type of fuel used by the car (e.g., Petrol, Diesel, CNG, LPG).\n",
        "* Transmission: Indicates the type of transmission system in the car (e.g., Manual, Automatic).\n",
        "* Owner_Type: Specifies the ownership status of the car (e.g., First owner, Second owner).\n",
        "* Mileage: Represents the fuel efficiency of the car in terms of kilometers per liter (kmpl) or kilometers per kilogram (km/kg).\n",
        "* Engine: Specifies the engine capacity of the car in cubic centimeters (CC).\n",
        "* Power: Indicates the power output of the car's engine in brake horsepower (bhp).\n",
        "* Seats: Specifies the seating capacity of the car.\n",
        "* New_Price: Represents the listed price of the car when it was new (if available).\n",
        "* Price: Represents the current price of the used car in the dataset (target variable for prediction).\n"
      ],
      "metadata": {
        "id": "1WFfuMsKS8qc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 2 : Problem Statement Definition\n",
        "\n",
        "* Creating a prediction model to estimate the price of used cars.\n"
      ],
      "metadata": {
        "id": "8GVBiCTOXM45"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 3 : Target variable identification\n",
        "\n",
        "* Price: Represents the current price of the used car listed in the dataset.\n"
      ],
      "metadata": {
        "id": "-n0DyekXZWSN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 4 : Visualising the distribution of Target variable\n",
        "\n",
        "* This function is useful for quickly visualizing the distribution of categorical variables in a DataFrame by plotting multiple bar charts at once."
      ],
      "metadata": {
        "id": "tdnbEBJ_dv5O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "# Creating histogram of the 'price' variable\n",
        "# This will help us to understand the distribution of 'price' values\n",
        "UsedCarData['Price'].hist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FpRVpIS4rHuO",
        "outputId": "051bc616-deee-45d2-c3fc-601f6d99e86d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Observations from step 4\n",
        "\n",
        "* The data distribution of the Price variable appears towards the higher end of the price range.\n",
        "* There are enough rows with different price ranges to train predictive models correctly and capture the variation in used car prices."
      ],
      "metadata": {
        "id": "s-I-8DinhRLm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 5 : Data exploration at basic level\n",
        "\n",
        "* The purpose of this step is to assess the dataset's volume, column types, and initial characteristics.\n",
        "* To view a few example rows of the data set, use the UsedCarData() function. This will give us a view of the data set and how it is organized.\n",
        "* To get a summary of the dataset, use UsedCarData. info() to get the number of rows in the dataset, column names in the dataset, data types in the dataset, and missing values in the dataset. This will help you determine the types of columns in the dataset (quantitative data, categorical data, or qualitative data).\n",
        "* Use UsedCarData.describe() to generate descriptive statistical details. This helps to get an idea of the distribution and variation of the number of attributes.\n",
        "* Use UsedCarData.nunique() to identify the number of unique values in each column. This helps distinguish between categorical and continuous/quantitative columns.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "vWjcQ9Vju5Np"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* cleaning the data  by converting non- numeric characters  into integers.\n",
        "* cleanind and converting string-based numeric data into integers, handling missing values and errors appropriately.\n",
        "* converting it to a numeric format suitable for analysis or modeling\n"
      ],
      "metadata": {
        "id": "hT_p7v1PvP3h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "def extract_numeric_and_convert(value):\n",
        "    try:\n",
        "        if pd.isna(value):\n",
        "            return np.nan\n",
        "        else:\n",
        "            numeric_value = float(value.split()[0])\n",
        "            return int(numeric_value)\n",
        "    except (ValueError, AttributeError):\n",
        "        return np.nan\n",
        "\n",
        "UsedCarData['Mileage'] = UsedCarData['Mileage'].apply(extract_numeric_and_convert)\n",
        "UsedCarData['Engine'] = UsedCarData['Engine'].apply(extract_numeric_and_convert)\n",
        "UsedCarData['Power'] = UsedCarData['Power'].apply(extract_numeric_and_convert)\n",
        "\n",
        "UsedCarData['New_Price'] = UsedCarData['New_Price'].replace('[^\\d.]', '', regex=True).astype(float).fillna(0).astype(int)\n",
        "\n",
        "\n",
        "UsedCarData.dropna(inplace=True)\n",
        "\n",
        "UsedCarData.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DrSmIMHrsuyE",
        "outputId": "f30d8d3d-71b1-4bf7-dfa5-d4f9f0e2003a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0                              Name    Location  Year  \\\n",
              "0           0            Maruti Wagon R LXI CNG      Mumbai  2010   \n",
              "1           1  Hyundai Creta 1.6 CRDi SX Option        Pune  2015   \n",
              "2           2                      Honda Jazz V     Chennai  2011   \n",
              "3           3                 Maruti Ertiga VDI     Chennai  2012   \n",
              "4           4   Audi A4 New 2.0 TDI Multitronic  Coimbatore  2013   \n",
              "\n",
              "   Kilometers_Driven Fuel_Type Transmission Owner_Type  Mileage  Engine  \\\n",
              "0              72000       CNG       Manual      First     26.0   998.0   \n",
              "1              41000    Diesel       Manual      First     19.0  1582.0   \n",
              "2              46000    Petrol       Manual      First     18.0  1199.0   \n",
              "3              87000    Diesel       Manual      First     20.0  1248.0   \n",
              "4              40670    Diesel    Automatic     Second     15.0  1968.0   \n",
              "\n",
              "   Power  Seats  New_Price  Price  \n",
              "0   58.0    5.0          0   1.75  \n",
              "1  126.0    5.0          0  12.50  \n",
              "2   88.0    5.0          8   4.50  \n",
              "3   88.0    7.0          0   6.00  \n",
              "4  140.0    5.0          0  17.74  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-281a878b-a15d-4273-8d9a-04f7a59bcfb4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Name</th>\n",
              "      <th>Location</th>\n",
              "      <th>Year</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_Price</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Maruti Wagon R LXI CNG</td>\n",
              "      <td>Mumbai</td>\n",
              "      <td>2010</td>\n",
              "      <td>72000</td>\n",
              "      <td>CNG</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>26.0</td>\n",
              "      <td>998.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyundai Creta 1.6 CRDi SX Option</td>\n",
              "      <td>Pune</td>\n",
              "      <td>2015</td>\n",
              "      <td>41000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.0</td>\n",
              "      <td>1582.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>12.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Honda Jazz V</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>2011</td>\n",
              "      <td>46000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>18.0</td>\n",
              "      <td>1199.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8</td>\n",
              "      <td>4.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Maruti Ertiga VDI</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>2012</td>\n",
              "      <td>87000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>20.0</td>\n",
              "      <td>1248.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0</td>\n",
              "      <td>6.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Audi A4 New 2.0 TDI Multitronic</td>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>2013</td>\n",
              "      <td>40670</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>15.0</td>\n",
              "      <td>1968.0</td>\n",
              "      <td>140.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>17.74</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-281a878b-a15d-4273-8d9a-04f7a59bcfb4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-281a878b-a15d-4273-8d9a-04f7a59bcfb4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-281a878b-a15d-4273-8d9a-04f7a59bcfb4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c9fc2f9d-b13a-4464-9dd9-0bbbc6056c94\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c9fc2f9d-b13a-4464-9dd9-0bbbc6056c94')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c9fc2f9d-b13a-4464-9dd9-0bbbc6056c94 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "UsedCarData",
              "summary": "{\n  \"name\": \"UsedCarData\",\n  \"rows\": 5872,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1737,\n        \"min\": 0,\n        \"max\": 6018,\n        \"num_unique_values\": 5872,\n        \"samples\": [\n          4204,\n          605,\n          205\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1811,\n        \"samples\": [\n          \"Maruti 800 Std\",\n          \"Honda City ZX CVT\",\n          \"Ford Figo 2015-2019 1.5D Titanium MT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Jaipur\",\n          \"Mumbai\",\n          \"Bangalore\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1998,\n        \"max\": 2019,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          2010,\n          2006,\n          2017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92169,\n        \"min\": 171,\n        \"max\": 6500000,\n        \"num_unique_values\": 3038,\n        \"samples\": [\n          14648,\n          61730,\n          49500\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Diesel\",\n          \"LPG\",\n          \"CNG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Automatic\",\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Second\",\n          \"Third\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.375212377837035,\n        \"min\": 0.0,\n        \"max\": 33.0,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          16.0,\n          32.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 601.6417826175225,\n        \"min\": 624.0,\n        \"max\": 5998.0,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          5998.0,\n          2956.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.92430435727243,\n        \"min\": 34.0,\n        \"max\": 560.0,\n        \"num_unique_values\": 190,\n        \"samples\": [\n          48.0,\n          52.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8050813299233973,\n        \"min\": 2.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          32,\n          53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.249453218099008,\n        \"min\": 0.44,\n        \"max\": 160.0,\n        \"num_unique_values\": 1364,\n        \"samples\": [\n          7.77,\n          16.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "UsedCarData.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YcSGA8-asysn",
        "outputId": "84e02b44-0708-4460-9484-f8fbec9c0c91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0                      Name   Location  Year  \\\n",
              "6014        6014          Maruti Swift VDI      Delhi  2014   \n",
              "6015        6015  Hyundai Xcent 1.1 CRDi S     Jaipur  2015   \n",
              "6016        6016     Mahindra Xylo D4 BSIV     Jaipur  2012   \n",
              "6017        6017        Maruti Wagon R VXI    Kolkata  2013   \n",
              "6018        6018     Chevrolet Beat Diesel  Hyderabad  2011   \n",
              "\n",
              "      Kilometers_Driven Fuel_Type Transmission Owner_Type  Mileage  Engine  \\\n",
              "6014              27365    Diesel       Manual      First     28.0  1248.0   \n",
              "6015             100000    Diesel       Manual      First     24.0  1120.0   \n",
              "6016              55000    Diesel       Manual     Second     14.0  2498.0   \n",
              "6017              46000    Petrol       Manual      First     18.0   998.0   \n",
              "6018              47000    Diesel       Manual      First     25.0   936.0   \n",
              "\n",
              "      Power  Seats  New_Price  Price  \n",
              "6014   74.0    5.0          7   4.75  \n",
              "6015   71.0    5.0          0   4.00  \n",
              "6016  112.0    8.0          0   2.90  \n",
              "6017   67.0    5.0          0   2.65  \n",
              "6018   57.0    5.0          0   2.50  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-63279e59-62e6-4f99-8071-890dd199e321\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Name</th>\n",
              "      <th>Location</th>\n",
              "      <th>Year</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_Price</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6014</th>\n",
              "      <td>6014</td>\n",
              "      <td>Maruti Swift VDI</td>\n",
              "      <td>Delhi</td>\n",
              "      <td>2014</td>\n",
              "      <td>27365</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>28.0</td>\n",
              "      <td>1248.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>7</td>\n",
              "      <td>4.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6015</th>\n",
              "      <td>6015</td>\n",
              "      <td>Hyundai Xcent 1.1 CRDi S</td>\n",
              "      <td>Jaipur</td>\n",
              "      <td>2015</td>\n",
              "      <td>100000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1120.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6016</th>\n",
              "      <td>6016</td>\n",
              "      <td>Mahindra Xylo D4 BSIV</td>\n",
              "      <td>Jaipur</td>\n",
              "      <td>2012</td>\n",
              "      <td>55000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Second</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2498.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6017</th>\n",
              "      <td>6017</td>\n",
              "      <td>Maruti Wagon R VXI</td>\n",
              "      <td>Kolkata</td>\n",
              "      <td>2013</td>\n",
              "      <td>46000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>18.0</td>\n",
              "      <td>998.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6018</th>\n",
              "      <td>6018</td>\n",
              "      <td>Chevrolet Beat Diesel</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>2011</td>\n",
              "      <td>47000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>25.0</td>\n",
              "      <td>936.0</td>\n",
              "      <td>57.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.50</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63279e59-62e6-4f99-8071-890dd199e321')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-63279e59-62e6-4f99-8071-890dd199e321 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-63279e59-62e6-4f99-8071-890dd199e321');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f1148708-e5a1-44ad-9a74-196e45f9474a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f1148708-e5a1-44ad-9a74-196e45f9474a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f1148708-e5a1-44ad-9a74-196e45f9474a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"UsedCarData\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 6014,\n        \"max\": 6018,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6015,\n          6018,\n          6016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Hyundai Xcent 1.1 CRDi S\",\n          \"Chevrolet Beat Diesel\",\n          \"Mahindra Xylo D4 BSIV\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Jaipur\",\n          \"Hyderabad\",\n          \"Delhi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2011,\n        \"max\": 2015,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2015,\n          2011,\n          2012\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27081,\n        \"min\": 27365,\n        \"max\": 100000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          100000,\n          47000,\n          55000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Second\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.674504383644443,\n        \"min\": 14.0,\n        \"max\": 28.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.3036381791778,\n        \"min\": 936.0,\n        \"max\": 2498.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1120.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.016660058153864,\n        \"min\": 57.0,\n        \"max\": 112.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          71.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3416407864998738,\n        \"min\": 5.0,\n        \"max\": 8.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9742946166329772,\n        \"min\": 2.5,\n        \"max\": 4.75,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load your dataset (assuming UsedCarData is already loaded)\n",
        "# Example:\n",
        "# UsedCarData = pd.read_csv('path_to_your_dataset.csv')\n",
        "\n",
        "# List of columns to remove\n",
        "columns_to_remove = ['Name', 'Location', 'Fuel_Type', 'Transmission', 'Owner_Type']\n",
        "\n",
        "# Drop specified columns\n",
        "UsedCarData.drop(columns=columns_to_remove, inplace=True)\n",
        "\n",
        "# Display the modified dataframe\n",
        "UsedCarData.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TkpW_Vqktdze",
        "outputId": "f04c69db-f692-4d33-9c48-82007a6df674"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0  Year  Kilometers_Driven  Mileage  Engine  Power  Seats  \\\n",
              "0           0  2010              72000     26.0   998.0   58.0    5.0   \n",
              "1           1  2015              41000     19.0  1582.0  126.0    5.0   \n",
              "2           2  2011              46000     18.0  1199.0   88.0    5.0   \n",
              "3           3  2012              87000     20.0  1248.0   88.0    7.0   \n",
              "4           4  2013              40670     15.0  1968.0  140.0    5.0   \n",
              "\n",
              "   New_Price  Price  \n",
              "0          0   1.75  \n",
              "1          0  12.50  \n",
              "2          8   4.50  \n",
              "3          0   6.00  \n",
              "4          0  17.74  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9131198-a361-4582-9804-63b3a5ef13b0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Year</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_Price</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2010</td>\n",
              "      <td>72000</td>\n",
              "      <td>26.0</td>\n",
              "      <td>998.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>41000</td>\n",
              "      <td>19.0</td>\n",
              "      <td>1582.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>12.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>46000</td>\n",
              "      <td>18.0</td>\n",
              "      <td>1199.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8</td>\n",
              "      <td>4.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>2012</td>\n",
              "      <td>87000</td>\n",
              "      <td>20.0</td>\n",
              "      <td>1248.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0</td>\n",
              "      <td>6.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>2013</td>\n",
              "      <td>40670</td>\n",
              "      <td>15.0</td>\n",
              "      <td>1968.0</td>\n",
              "      <td>140.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>17.74</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9131198-a361-4582-9804-63b3a5ef13b0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a9131198-a361-4582-9804-63b3a5ef13b0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a9131198-a361-4582-9804-63b3a5ef13b0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1338e407-ab2b-4026-bf73-506f23b8f3a3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1338e407-ab2b-4026-bf73-506f23b8f3a3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1338e407-ab2b-4026-bf73-506f23b8f3a3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "UsedCarData",
              "summary": "{\n  \"name\": \"UsedCarData\",\n  \"rows\": 5872,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1737,\n        \"min\": 0,\n        \"max\": 6018,\n        \"num_unique_values\": 5872,\n        \"samples\": [\n          4204,\n          605,\n          205\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1998,\n        \"max\": 2019,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          2010,\n          2006,\n          2017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92169,\n        \"min\": 171,\n        \"max\": 6500000,\n        \"num_unique_values\": 3038,\n        \"samples\": [\n          14648,\n          61730,\n          49500\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.375212377837035,\n        \"min\": 0.0,\n        \"max\": 33.0,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          16.0,\n          32.0,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 601.6417826175225,\n        \"min\": 624.0,\n        \"max\": 5998.0,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          5998.0,\n          2956.0,\n          2498.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.92430435727243,\n        \"min\": 34.0,\n        \"max\": 560.0,\n        \"num_unique_values\": 190,\n        \"samples\": [\n          48.0,\n          52.0,\n          169.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8050813299233973,\n        \"min\": 2.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.0,\n          2.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          32,\n          53,\n          19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.249453218099008,\n        \"min\": 0.44,\n        \"max\": 160.0,\n        \"num_unique_values\": 1364,\n        \"samples\": [\n          7.77,\n          16.9,\n          46.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "UsedCarData.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "id": "QuUWN7Hbtgov",
        "outputId": "b54521fd-825d-417b-980b-d907ec00f357"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0  Year  Kilometers_Driven  Mileage  Engine  Power  Seats  \\\n",
              "6014        6014  2014              27365     28.0  1248.0   74.0    5.0   \n",
              "6015        6015  2015             100000     24.0  1120.0   71.0    5.0   \n",
              "6016        6016  2012              55000     14.0  2498.0  112.0    8.0   \n",
              "6017        6017  2013              46000     18.0   998.0   67.0    5.0   \n",
              "6018        6018  2011              47000     25.0   936.0   57.0    5.0   \n",
              "\n",
              "      New_Price  Price  \n",
              "6014          7   4.75  \n",
              "6015          0   4.00  \n",
              "6016          0   2.90  \n",
              "6017          0   2.65  \n",
              "6018          0   2.50  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dcf3f038-e8c6-45c2-b9d6-aa35418662b2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Year</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_Price</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6014</th>\n",
              "      <td>6014</td>\n",
              "      <td>2014</td>\n",
              "      <td>27365</td>\n",
              "      <td>28.0</td>\n",
              "      <td>1248.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>7</td>\n",
              "      <td>4.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6015</th>\n",
              "      <td>6015</td>\n",
              "      <td>2015</td>\n",
              "      <td>100000</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1120.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6016</th>\n",
              "      <td>6016</td>\n",
              "      <td>2012</td>\n",
              "      <td>55000</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2498.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6017</th>\n",
              "      <td>6017</td>\n",
              "      <td>2013</td>\n",
              "      <td>46000</td>\n",
              "      <td>18.0</td>\n",
              "      <td>998.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6018</th>\n",
              "      <td>6018</td>\n",
              "      <td>2011</td>\n",
              "      <td>47000</td>\n",
              "      <td>25.0</td>\n",
              "      <td>936.0</td>\n",
              "      <td>57.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.50</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dcf3f038-e8c6-45c2-b9d6-aa35418662b2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dcf3f038-e8c6-45c2-b9d6-aa35418662b2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dcf3f038-e8c6-45c2-b9d6-aa35418662b2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e4e949d8-cf36-4d2d-99d4-6b1a7c570713\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e4e949d8-cf36-4d2d-99d4-6b1a7c570713')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e4e949d8-cf36-4d2d-99d4-6b1a7c570713 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"UsedCarData\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 6014,\n        \"max\": 6018,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6015,\n          6018,\n          6016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2011,\n        \"max\": 2015,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2015,\n          2011,\n          2012\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27081,\n        \"min\": 27365,\n        \"max\": 100000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          100000,\n          47000,\n          55000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.674504383644443,\n        \"min\": 14.0,\n        \"max\": 28.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          24.0,\n          25.0,\n          14.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.3036381791778,\n        \"min\": 936.0,\n        \"max\": 2498.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1120.0,\n          936.0,\n          2498.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.016660058153864,\n        \"min\": 57.0,\n        \"max\": 112.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          71.0,\n          57.0,\n          112.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3416407864998738,\n        \"min\": 5.0,\n        \"max\": 8.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          8.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9742946166329772,\n        \"min\": 2.5,\n        \"max\": 4.75,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4.0,\n          2.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "UsedCarData.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2wmUcTrvt6aw",
        "outputId": "9646c282-2696-4718-baa8-3b35e7381cf2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Unnamed: 0         Year  Kilometers_Driven      Mileage       Engine  \\\n",
              "count  5872.000000  5872.000000       5.872000e+03  5872.000000  5872.000000   \n",
              "mean   3013.288147  2013.477691       5.831700e+04    17.849796  1625.745572   \n",
              "std    1737.351187     3.164568       9.216941e+04     4.375212   601.641783   \n",
              "min       0.000000  1998.000000       1.710000e+02     0.000000   624.000000   \n",
              "25%    1509.750000  2012.000000       3.342250e+04    15.000000  1198.000000   \n",
              "50%    3015.500000  2014.000000       5.260900e+04    18.000000  1495.500000   \n",
              "75%    4516.250000  2016.000000       7.240275e+04    21.000000  1991.000000   \n",
              "max    6018.000000  2019.000000       6.500000e+06    33.000000  5998.000000   \n",
              "\n",
              "             Power        Seats    New_Price        Price  \n",
              "count  5872.000000  5872.000000  5872.000000  5872.000000  \n",
              "mean    112.961853     5.283719     2.780484     9.603919  \n",
              "std      53.924304     0.805081    10.229408    11.249453  \n",
              "min      34.000000     2.000000     0.000000     0.440000  \n",
              "25%      75.000000     5.000000     0.000000     3.517500  \n",
              "50%      97.000000     5.000000     0.000000     5.750000  \n",
              "75%     138.000000     5.000000     0.000000    10.000000  \n",
              "max     560.000000    10.000000    99.000000   160.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9f5da87c-0004-48b4-a0f1-e4fa5c6bb68c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Year</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_Price</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5872.000000</td>\n",
              "      <td>5872.000000</td>\n",
              "      <td>5.872000e+03</td>\n",
              "      <td>5872.000000</td>\n",
              "      <td>5872.000000</td>\n",
              "      <td>5872.000000</td>\n",
              "      <td>5872.000000</td>\n",
              "      <td>5872.000000</td>\n",
              "      <td>5872.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3013.288147</td>\n",
              "      <td>2013.477691</td>\n",
              "      <td>5.831700e+04</td>\n",
              "      <td>17.849796</td>\n",
              "      <td>1625.745572</td>\n",
              "      <td>112.961853</td>\n",
              "      <td>5.283719</td>\n",
              "      <td>2.780484</td>\n",
              "      <td>9.603919</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1737.351187</td>\n",
              "      <td>3.164568</td>\n",
              "      <td>9.216941e+04</td>\n",
              "      <td>4.375212</td>\n",
              "      <td>601.641783</td>\n",
              "      <td>53.924304</td>\n",
              "      <td>0.805081</td>\n",
              "      <td>10.229408</td>\n",
              "      <td>11.249453</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1998.000000</td>\n",
              "      <td>1.710000e+02</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>624.000000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.440000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1509.750000</td>\n",
              "      <td>2012.000000</td>\n",
              "      <td>3.342250e+04</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>1198.000000</td>\n",
              "      <td>75.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.517500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3015.500000</td>\n",
              "      <td>2014.000000</td>\n",
              "      <td>5.260900e+04</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>1495.500000</td>\n",
              "      <td>97.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>4516.250000</td>\n",
              "      <td>2016.000000</td>\n",
              "      <td>7.240275e+04</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>1991.000000</td>\n",
              "      <td>138.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>6018.000000</td>\n",
              "      <td>2019.000000</td>\n",
              "      <td>6.500000e+06</td>\n",
              "      <td>33.000000</td>\n",
              "      <td>5998.000000</td>\n",
              "      <td>560.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>160.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f5da87c-0004-48b4-a0f1-e4fa5c6bb68c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9f5da87c-0004-48b4-a0f1-e4fa5c6bb68c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9f5da87c-0004-48b4-a0f1-e4fa5c6bb68c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7b0e86a2-6609-4cc7-bebc-dfc119da93ea\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7b0e86a2-6609-4cc7-bebc-dfc119da93ea')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7b0e86a2-6609-4cc7-bebc-dfc119da93ea button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"UsedCarData\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2142.0139682949844,\n        \"min\": 0.0,\n        \"max\": 6018.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3013.2881471389646,\n          3015.5,\n          5872.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1625.9816636759429,\n        \"min\": 3.1645680812055934,\n        \"max\": 5872.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2013.4776907356948,\n          2014.0,\n          5872.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2282404.4746495346,\n        \"min\": 171.0,\n        \"max\": 6500000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          58316.99914850136,\n          52609.0,\n          5872.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2070.573391362196,\n        \"min\": 0.0,\n        \"max\": 5872.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          17.849795640326974,\n          18.0,\n          5872.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2217.2387185939324,\n        \"min\": 601.6417826175225,\n        \"max\": 5998.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1625.7455722070845,\n          1495.5,\n          5872.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2029.0542373512174,\n        \"min\": 34.0,\n        \"max\": 5872.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          112.96185286103542,\n          97.0,\n          5872.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2074.3960342320115,\n        \"min\": 0.8050813299233973,\n        \"max\": 5872.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5872.0,\n          5.283719346049046,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2070.6883111743537,\n        \"min\": 0.0,\n        \"max\": 5872.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.780483651226158,\n          99.0,\n          10.229407807678706\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2066.6345648220067,\n        \"min\": 0.44,\n        \"max\": 5872.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.603918596730246,\n          5.75,\n          5872.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "UsedCarData.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-b6Lk5_8uB-V",
        "outputId": "b7d4381d-eeb4-4561-cbb9-5059593def3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 5872 entries, 0 to 6018\n",
            "Data columns (total 9 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Unnamed: 0         5872 non-null   int64  \n",
            " 1   Year               5872 non-null   int64  \n",
            " 2   Kilometers_Driven  5872 non-null   int64  \n",
            " 3   Mileage            5872 non-null   float64\n",
            " 4   Engine             5872 non-null   float64\n",
            " 5   Power              5872 non-null   float64\n",
            " 6   Seats              5872 non-null   float64\n",
            " 7   New_Price          5872 non-null   int64  \n",
            " 8   Price              5872 non-null   float64\n",
            "dtypes: float64(5), int64(4)\n",
            "memory usage: 458.8 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "UsedCarData.nunique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TWRpj42wuOuY",
        "outputId": "66a6ee3e-728b-4156-8690-ad6083c4766f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0           5872\n",
              "Year                   22\n",
              "Kilometers_Driven    3038\n",
              "Mileage                28\n",
              "Engine                139\n",
              "Power                 190\n",
              "Seats                   8\n",
              "New_Price              77\n",
              "Price                1364\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Observation from step 5\n",
        "\n",
        "Based on the basic exploration above, here is the simple report of the data.\n",
        "\n",
        "* Year - Categorical, selected\n",
        "* Kilometers_Driven - Continuous, selected\n",
        "* Mileage - Contionuous, selected\n",
        "* Engine - Continuous, selected\n",
        "* power - Continuous, selected\n",
        "* seats = Categorical, selected\n",
        "* price - Continuous, selected(Target variable)\n",
        "* Name - Continuous, selected\n",
        "* location - Continuous, selected\n",
        "* Fuel_Type - Continuous, selected\n",
        "* Transmission - Continuous, selected\n",
        "* Owner_Type - Continuous, selected\n",
        "* New_Price - Continuous, selected\n"
      ],
      "metadata": {
        "id": "vnytmXU9ucun"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 6 :  Visual Exploratory Data Analysis\n",
        "Visualize distribution of all the Categorical Predictor variables in the data using bar plots.\n",
        "Based on the Basic Exploration Data Analysis in the previous step,  we could spotted two categorical predictors in the data\n",
        "\n",
        "' Seats', 'Year'"
      ],
      "metadata": {
        "id": "LAyuXWQSu90U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Plotting multiple bar charts at once for categorical variables\n",
        "def PlotBarCharts(inpData, colsToPlot):\n",
        "    %matplotlib inline\n",
        "\n",
        "    import matplotlib.pyplot as plt\n",
        "\n",
        "    # Generating multiple subplots\n",
        "    fig, subPlot=plt.subplots(nrows=1, ncols=len(colsToPlot), figsize=(20,5))\n",
        "    fig.suptitle('Bar charts of: '+ str(colsToPlot))\n",
        "\n",
        "    for colName, plotNumber in zip(colsToPlot, range(len(colsToPlot))):\n",
        "        inpData.groupby(colName).size().plot(kind='bar',ax=subPlot[plotNumber])"
      ],
      "metadata": {
        "id": "BOEU13EQwIt6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calling the function PlotBarCharts() we have created\n",
        "PlotBarCharts(inpData=UsedCarData, colsToPlot=['Seats', 'Year'])"
      ],
      "metadata": {
        "id": "UxqzKi92wktj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b80e34e6-ff22-47d6-9d63-d45a96dda516"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Observation:"
      ],
      "metadata": {
        "id": "Ut9m2-f9G3D8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 7 : Now Visualize distribution of all the Continuous Predictor variables in the data using histograms"
      ],
      "metadata": {
        "id": "LrtCtsIDEBxF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting histograms of multiple columns together\n",
        "UsedCarData.hist(['Kilometers_Driven', 'Mileage', 'Engine', 'Power', 'New_Price'], figsize=(18,10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vm3HjxO7Fz43",
        "outputId": "bd2ff9f2-7f16-4fd5-dd28-e53a8877cb55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<Axes: title={'center': 'Kilometers_Driven'}>,\n",
              "        <Axes: title={'center': 'Mileage'}>],\n",
              "       [<Axes: title={'center': 'Engine'}>,\n",
              "        <Axes: title={'center': 'Power'}>],\n",
              "       [<Axes: title={'center': 'New_Price'}>, <Axes: >]], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x1000 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 8 : Outliner analysis"
      ],
      "metadata": {
        "id": "BgvOOB5GHnvT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Replacing outliers for 'CRIM'\n",
        "# Finding nearest values to 60 mark\n",
        "UsedCarData['Price'][UsedCarData['Price']<60].sort_values(ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sl5LuH_sIaJs",
        "outputId": "0da0ccfb-69cd-4f6d-fbeb-840a27f53255"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "941     59.72\n",
              "3268    59.65\n",
              "2767    59.29\n",
              "5521    59.00\n",
              "5067    58.91\n",
              "        ...  \n",
              "3228     0.50\n",
              "2847     0.45\n",
              "1628     0.45\n",
              "3138     0.45\n",
              "1713     0.44\n",
              "Name: Price, Length: 5826, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Observation from step 8 :-\n",
        "Above result shows the nearest logical value is 59.72, hence, replacing any value above 60 with it."
      ],
      "metadata": {
        "id": "ZHCUiqHeJMu9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 9:Visualising Data Distribution after outlier removal\n"
      ],
      "metadata": {
        "id": "7R3qqxIhJUeT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "UsedCarData.hist(['Price'], figsize=(18,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hiK2TGtTJ3_0",
        "outputId": "9361785e-cddf-45a2-c88e-0b3e40ebda1f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<Axes: title={'center': 'Price'}>]], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABbMAAAHDCAYAAAAeFofEAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA3yElEQVR4nO3de5SX5WEn8O8Aw3CRgUDCIBUIjTfwLkSZJDVqkNFSEyNtoiVqo8ajC0ag9bbrXVOUVIlGIk1ixT2Nm+huTKoYYYKKsYIalI2XLLUuDbZmYBML441hZH77R8/86nhHgfeF+XzO4eDveZ7f+3sezxdkvr68U1OpVCoBAAAAAIAS61H0BgAAAAAA4L0oswEAAAAAKD1lNgAAAAAApafMBgAAAACg9JTZAAAAAACUnjIbAAAAAIDSU2YDAAAAAFB6ymwAAAAAAEpPmQ0AAAAAQOkpswEAYAfwF3/xF/n4xz9e9DYAAKAwymwAANgOFixYkJqamuqPPn36ZM8998z06dOzdu3aorcHAACl16voDQAAQHdyxRVXZPTo0dm4cWMeeuih3HTTTbnnnnvy1FNPpV+/fu/4vu9973vp6OjYjjsFAIByUWYDAMB2dMwxx2T8+PFJktNPPz1DhgzJddddl5/+9Kc58cQT37L+lVdeSf/+/VNbW7u9twoAAKXiMSMAAFCgI488MkmyevXq/MVf/EV22WWXPPfcc/njP/7jDBgwIFOnTk3y9s/M7ujoyPXXX5/99tsvffr0ycc+9rEcffTR+eUvf9ll3d///d9n3Lhx6du3bwYPHpwTTjghzz///HY5HwAAbC3KbAAAKNBzzz2XJBkyZEiS5PXXX09TU1OGDh2av/mbv8mUKVPe8b2nnXZaZsyYkREjRuSaa67JBRdckD59+mT58uXVNd/4xjdy8sknZ4899sh1112XGTNmZMmSJTnssMOyfv36bXo2AADYmjxmBAAAtqMNGzbkd7/7XTZu3Jh//Md/zBVXXJG+ffvmT/7kT7Js2bK0tbXlz/7szzJ79ux3vc7999+fBQsW5Otf/3quv/766vhf/uVfplKpJEl+85vf5NJLL81VV12V//pf/2t1zfHHH5+DDjoo3/nOd7qMAwBAmSmzAQBgO5o4cWKX16NGjcoPfvCD/MEf/EF17KyzznrP6/yv//W/UlNTk0svvfQtczU1NUmSH//4x+no6MiXvvSl/O53v6vODxs2LHvssUfuv/9+ZTYAADsMZTYAAGxH8+bNy5577plevXqloaEhe+21V3r0+M+n//Xq1Su77bbbe17nueeey/DhwzN48OB3XPPss8+mUqlkjz32eNt531QSAIAdiTIbAAC2o0MOOSTjx49/x/m6urou5faH0dHRkZqamvzsZz9Lz5493zK/yy67bJXPAQCA7UGZDQAAO6BPfOITWbRoUV588cV3vDv7E5/4RCqVSkaPHp0999xzO+8QAAC2rq1zywcAALBdTZkyJZVKJZdffvlb5jq/AeTxxx+fnj175vLLL6+OvXHN73//++2yVwAA2BrcmQ0AADugI444IieddFJuuOGGPPvsszn66KPT0dGRX/ziFzniiCMyffr0fOITn8hVV12VCy+8MP/yL/+S4447LgMGDMjq1atz55135owzzshf/dVfFX0UAAB4X5TZAACwg7rllluy//775+abb865556bgQMHZvz48fnUpz5VXXPBBRdkzz33zNy5c6t3cY8YMSKTJk3K5z//+aK2DgAAW6ym8ua/bwgAAAAAACXjmdkAAAAAAJSeMhsAAAAAgNJTZgMAAAAAUHrKbAAAAAAASk+ZDQAAAABA6SmzAQAAAAAovV5Fb2Bb6ejoyAsvvJABAwakpqam6O0AAAAAAPA2KpVKXnrppQwfPjw9erzz/dc7bZn9wgsvZMSIEUVvAwAAAACA9+H555/Pbrvt9o7zO22ZPWDAgCT/8S+gvr6+4N1se+3t7Vm8eHEmTZqU2traordDNyJ7FEX2KIrsURTZoyiyR1FkjyLIHUXp7tlrbW3NiBEjqp3uO9lpy+zOR4vU19d3mzK7X79+qa+v75aBpziyR1Fkj6LIHkWRPYoiexRF9iiC3FEU2fsP7/W4aN8AEgAAAACA0lNmAwAAAABQespsAAAAAABKT5kNAAAAAEDpKbMBAAAAACg9ZTYAAAAAAKWnzAYAAAAAoPSU2QAAAAAAlN4WldmXXXZZampquvzYe++9q/MbN27MtGnTMmTIkOyyyy6ZMmVK1q5d2+Uaa9asyeTJk9OvX78MHTo05557bl5//fUuax544IEcfPDBqaury+67754FCxZ88BMCAAAAALDD2+I7s/fZZ5/89re/rf546KGHqnMzZ87MXXfdlTvuuCNLly7NCy+8kOOP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yZMnZ9OmTXn44Ydz6623ZsGCBbnkkkuqa1avXp3JkyfniCOOyMqVKzNjxoycfvrpWbRo0VY6MgAAAAAAO5peW7L42GOP7fL6G9/4Rm666aYsX748u+22W26++ebcdtttOfLII5Mkt9xyS8aMGZPly5dnwoQJWbx4cZ555pn8/Oc/T0NDQw488MBceeWVOf/883PZZZeld+/emT9/fkaPHp1rr702STJmzJg89NBDmTt3bpqamrbSsQEAAAAA2JFsUZn9Rps3b84dd9yRV155JY2NjVmxYkXa29szceLE6pq99947I0eOzLJlyzJhwoQsW7Ys++23XxoaGqprmpqactZZZ+Xpp5/OQQcdlGXLlnW5RueaGTNmvOt+2tra0tbWVn3d2tqaJGlvb097e/sHPeYOo/OMnT/X9awUuR0KtL3z/ubswfYiexRF9iiK7FEU2aMoskcR5I6idPfsvd9zb3GZ/eSTT6axsTEbN27MLrvskjvvvDNjx47NypUr07t37wwaNKjL+oaGhrS0tCRJWlpauhTZnfOdc++2prW1Na+99lr69u37tvuaPXt2Lr/88reML168OP369dvSY+6wmpubkyRzDil4IxTmnnvuKeRzO7MH25vsURTZoyiyR1Fkj6LIHkWQO4rSXbP36quvvq91W1xm77XXXlm5cmU2bNiQ//k//2dOOeWULF26dIs3uLVdeOGFmTVrVvV1a2trRowYkUmTJqW+vr7AnW0f7e3taW5uzlFHHZXa2trse5lnjHdXT122fR/H8+bswfYiexRF9iiK7FEU2aMoskcR5I6idPfsdT5l471scZndu3fv7L777kmScePG5bHHHsv111+fL3/5y9m0aVPWr1/f5e7stWvXZtiwYUmSYcOG5dFHH+1yvbVr11bnOn/uHHvjmvr6+ne8KztJ6urqUldX95bx2trabhWAzvO2ba4peisUpKi8d7dfa5SH7FEU2aMoskdRZI+iyB5FkDuK0l2z937P3OPDflBHR0fa2toybty41NbWZsmSJdW5VatWZc2aNWlsbEySNDY25sknn8y6deuqa5qbm1NfX5+xY8dW17zxGp1rOq8BAAAAAED3s0V3Zl944YU55phjMnLkyLz00ku57bbb8sADD2TRokUZOHBgTjvttMyaNSuDBw9OfX19zj777DQ2NmbChAlJkkmTJmXs2LE5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AABgeyrtndk/+tGPMmvWrFx66aV5/PHHc8ABB6SpqSnr1q0remsAAAAAAGxnpb0z+7rrrsvXvva1fPWrX02SzJ8/PwsXLszf/d3f5YILLih4dwAAxXNXfvfS+bcCAACguyplmb1p06asWLEiF154YXWsR48emThxYpYtW/a272lra0tbW1v19YYNG5IkL774Ytrb27fthkugvb09r776an7/+9+ntrY2vV5/pegt0U306qjk1Vc70qu9RzZ3FPvX7eleZI+iyB5F6cxe55/3YHt589casL3IHkWQO4rS3bP30ksvJUkqlcq7ritlmf273/0umzdvTkNDQ5fxhoaG/J//83/e9j2zZ8/O5Zdf/pbx0aNHb5M9Av/pz4veAN2W7FEU2aMosgcAwM7spZdeysCBA99xvpRl9gdx4YUXZtasWdXXHR0defHFFzNkyJDU1Oz8d021trZmxIgRef7551NfX1/0duhGZI+iyB5FkT2KInsURfYoiuxRBLmjKN09e5VKJS+99FKGDx/+rutKWWZ/9KMfTc+ePbN27dou42vXrs2wYcPe9j11dXWpq6vrMjZo0KBttcXSqq+v75aBp3iyR1Fkj6LIHkWRPYoiexRF9iiC3FGU7py9d7sju1OP7bCPLda7d++MGzcuS5YsqY51dHRkyZIlaWxsLHBnAAAAAAAUoZR3ZifJrFmzcsopp2T8+PE55JBD8q1vfSuvvPJKvvrVrxa9NQAAAAAAtrPSltlf/vKX8//+3//LJZdckpaWlhx44IG599573/JNIfkPdXV1ufTSS9/yqBXY1mSPosgeRZE9iiJ7FEX2KIrsUQS5oyiy9/7UVCqVStGbAAAAAACAd1PKZ2YDAAAAAMAbKbMBAAAAACg9ZTYAAAAAAKWnzAYAAAAAoPSU2TuBefPm5eMf/3j69OmTQw89NI8++mjRW2InM3v27Hzyk5/MgAEDMnTo0Bx33HFZtWpVlzUbN27MtGnTMmTIkOyyyy6ZMmVK1q5dW9CO2VldffXVqampyYwZM6pjsse28m//9m/5yle+kiFDhqRv377Zb7/98stf/rI6X6lUcskll2TXXXdN3759M3HixDz77LMF7pidwebNm3PxxRdn9OjR6du3bz7xiU/kyiuvzBu/Z7vssTU8+OCDOfbYYzN8+PDU1NTkJz/5SZf595OzF198MVOnTk19fX0GDRqU0047LS+//PJ2PAU7onfLXnt7e84///zst99+6d+/f4YPH56TTz45L7zwQpdryB4fxHv9vvdGZ555ZmpqavKtb32ry7js8UG8n+z9+te/zuc///kMHDgw/fv3zyc/+cmsWbOmOu/r3v+kzN7B/ehHP8qsWbNy6aWX5vHHH88BBxyQpqamrFu3ruitsRNZunRppk2bluXLl6e5uTnt7e2ZNGlSXnnlleqamTNn5q677sodd9yRpUuX5oUXXsjxxx9f4K7Z2Tz22GP527/92+y///5dxmWPbeHf//3f8+lPfzq1tbX52c9+lmeeeSbXXnttPvKRj1TXzJkzJzfccEPmz5+fRx55JP37909TU1M2btxY4M7Z0V1zzTW56aabcuONN+bXv/51rrnmmsyZMyff/va3q2tkj63hlVdeyQEHHJB58+a97fz7ydnUqVPz9NNPp7m5OXfffXcefPDBnHHGGdvrCOyg3i17r776ah5//PFcfPHFefzxx/PjH/84q1atyuc///ku62SPD+K9ft/rdOedd2b58uUZPnz4W+Zkjw/ivbL33HPP5TOf+Uz23nvvPPDAA/nVr36Viy++OH369Kmu8XXvG1TYoR1yyCGVadOmVV9v3ry5Mnz48Mrs2bML3BU7u3Xr1lWSVJYuXVqpVCqV9evXV2prayt33HFHdc2vf/3rSpLKsmXLitomO5GXXnqpsscee1Sam5srn/3sZyvnnHNOpVKRPbad888/v/KZz3zmHec7Ojoqw4YNq3zzm9+sjq1fv75SV1dX+R//439sjy2yk5o8eXLl1FNP7TJ2/PHHV6ZOnVqpVGSPbSNJ5c4776y+fj85e+aZZypJKo899lh1zc9+9rNKTU1N5d/+7d+2297Zsb05e2/n0UcfrSSp/OY3v6lUKrLH1vFO2fvXf/3Xyh/8wR9UnnrqqcqoUaMqc+fOrc7JHlvD22Xvy1/+cuUrX/nKO77H171duTN7B7Zp06asWLEiEydOrI716NEjEydOzLJlywrcGTu7DRs2JEkGDx6cJFmxYkXa29u7ZHHvvffOyJEjZZGtYtq0aZk8eXKXjCWyx7bzD//wDxk/fnz+7M/+LEOHDs1BBx2U733ve9X51atXp6WlpUv2Bg4cmEMPPVT2+FA+9alPZcmSJfmnf/qnJMn//t//Ow899FCOOeaYJLLH9vF+crZs2bIMGjQo48ePr66ZOHFievTokUceeWS775md14YNG1JTU5NBgwYlkT22nY6Ojpx00kk599xzs88++7xlXvbYFjo6OrJw4cLsueeeaWpqytChQ3PooYd2eRSJr3u7UmbvwH73u99l8+bNaWho6DLe0NCQlpaWgnbFzq6joyMzZszIpz/96ey7775JkpaWlvTu3bv6B8xOssjW8MMf/jCPP/54Zs+e/ZY52WNb+b//9//mpptuyh577JFFixblrLPOyte//vXceuutSVLNl/8Gs7VdcMEFOeGEE7L33nuntrY2Bx10UGbMmJGpU6cmkT22j/eTs5aWlgwdOrTLfK9evTJ48GBZZKvZuHFjzj///Jx44ompr69PIntsO9dcc0169eqVr3/96287L3tsC+vWrcvLL7+cq6++OkcffXQWL16cL37xizn++OOzdOnSJL7ufbNeRW8A2LFMmzYtTz31VB566KGit0I38Pzzz+ecc85Jc3Nzl+eFwbbW0dGR8ePH56//+q+TJAcddFCeeuqpzJ8/P6ecckrBu2Nndvvtt+cHP/hBbrvttuyzzz5ZuXJlZsyYkeHDh8se0K20t7fnS1/6UiqVSm666aait8NObsWKFbn++uvz+OOPp6ampujt0I10dHQkSb7whS9k5syZSZIDDzwwDz/8cObPn5/PfvazRW6vlNyZvQP76Ec/mp49e77lu5euXbs2w4YNK2hX7MymT5+eu+++O/fff39222236viwYcOyadOmrF+/vst6WeTDWrFiRdatW5eDDz44vXr1Sq9evbJ06dLccMMN6dWrVxoaGmSPbWLXXXfN2LFju4yNGTOm+h3FO/Plv8Fsbeeee2717uz99tsvJ510UmbOnFn92ymyx/bwfnI2bNiwt3zT+ddffz0vvviiLPKhdRbZv/nNb9Lc3Fy9KzuRPbaNX/ziF1m3bl1GjhxZ/brjN7/5Tf7yL/8yH//4x5PIHtvGRz/60fTq1es9v/bwde9/UmbvwHr37p1x48ZlyZIl1bGOjo4sWbIkjY2NBe6MnU2lUsn06dNz55135r777svo0aO7zI8bNy61tbVdsrhq1aqsWbNGFvlQPve5z+XJJ5/MypUrqz/Gjx+fqVOnVv9Z9tgWPv3pT2fVqlVdxv7pn/4po0aNSpKMHj06w4YN65K91tbWPPLII7LHh/Lqq6+mR4+uf0Tv2bNn9a4d2WN7eD85a2xszPr167NixYrqmvvuuy8dHR059NBDt/ue2Xl0FtnPPvtsfv7zn2fIkCFd5mWPbeGkk07Kr371qy5fdwwfPjznnntuFi1alET22DZ69+6dT37yk+/6tYfOpSuPGdnBzZo1K6ecckrGjx+fQw45JN/61rfyyiuv5Ktf/WrRW2MnMm3atNx222356U9/mgEDBlSfyTRw4MD07ds3AwcOzGmnnZZZs2Zl8ODBqa+vz9lnn53GxsZMmDCh4N2zIxswYED12eyd+vfvnyFDhlTHZY9tYebMmfnUpz6Vv/7rv86XvvSlPProo/nud7+b7373u0mSmpqazJgxI1dddVX22GOPjB49OhdffHGGDx+e4447rtjNs0M79thj841vfCMjR47MPvvskyeeeCLXXXddTj311CSyx9bz8ssv55//+Z+rr1evXp2VK1dm8ODBGTly5HvmbMyYMTn66KPzta99LfPnz097e3umT5+eE044IcOHDy/oVOwI3i17u+66a/70T/80jz/+eO6+++5s3ry5+rXH4MGD07t3b9njA3uv3/fe/D9OamtrM2zYsOy1115J/L7HB/de2Tv33HPz5S9/OYcddliOOOKI3HvvvbnrrrvywAMPJInO5c0q7PC+/e1vV0aOHFnp3bt35ZBDDqksX7686C2xk0nytj9uueWW6prXXnut8l/+y3+pfOQjH6n069ev8sUvfrHy29/+trhNs9P67Gc/WznnnHOqr2WPbeWuu+6q7LvvvpW6urrK3nvvXfnud7/bZb6jo6Ny8cUXVxoaGip1dXWVz33uc5VVq1YVtFt2Fq2trZVzzjmnMnLkyEqfPn0qf/iHf1j5b//tv1Xa2tqqa2SPreH+++9/2z/fnXLKKZVK5f3l7Pe//33lxBNPrOyyyy6V+vr6yle/+tXKSy+9VMBp2JG8W/ZWr179jl973H///dVryB4fxHv9vvdmo0aNqsydO7fLmOzxQbyf7N18882V3XffvdKnT5/KAQccUPnJT37S5Rq+7v1PNZVKpbLtK3MAAAAAAPjgPDMbAAAAAIDSU2YDAAAAAFB6ymwAAAAAAEpPmQ0AAAAAQOkpswEAAAAAKD1lNgAAAAAApafMBgAAAACg9JTZAAAAAACUnjIbAAAAAIDSU2YDAAAAAFB6ymwAAAAAAEpPmQ0AAAAAQOn9f5UYZdKxMo8PAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Observation from step 9\n",
        "After the outlier treatment, the distribution has improved. *There is still a tail, but it's thick, meaning there are many values within this range, so it's acceptable."
      ],
      "metadata": {
        "id": "pR_a4S1yKCBb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 10 : Missing Value Analysis"
      ],
      "metadata": {
        "id": "RStRD4QBKI4_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Finding how many missing values are there for each column\n",
        "UsedCarData.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ELTs6TvKKRZr",
        "outputId": "8b2505fd-3526-4a91-e163-309420c8c373"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0           0\n",
              "Year                 0\n",
              "Kilometers_Driven    0\n",
              "Mileage              0\n",
              "Engine               0\n",
              "Power                0\n",
              "Seats                0\n",
              "New_Price            0\n",
              "Price                0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Observations from Step 10: Missing Value Analysis\n",
        "* No missing values in this data!\n",
        "* So no removal of any data samples(rows) is needed.\n"
      ],
      "metadata": {
        "id": "61JeyjX8Kdtj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 11 : Feature selection ( Attribute Selection)\n",
        "\n",
        "The Target variable for this dataset is a Continuous variable, so the following two scenarios will require your attention: * A Continuous Target Variable vs. A Categorized Predictor"
      ],
      "metadata": {
        "id": "57DbTOEqKiWd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Relationship exploration: Continuous Vs Continuous -- Scatter Charts\n",
        "\n",
        "If the Target variable is a continuous variable and the predictor is a continuous variable, we can plot the relationship using scatter plot and use pearson’s correlation value to measure the strength of the relationship."
      ],
      "metadata": {
        "id": "mEgWsKP4LOjn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ContinuousCols=['Kilometers_Driven', 'Mileage', 'Engine', 'Power', 'New_Price']\n",
        "\n",
        "# Plotting scatter chart for each predictor vs the target variable\n",
        "for predictor in ContinuousCols:\n",
        "    UsedCarData.plot.scatter(x=predictor, y='Price', figsize=(10,5), title=predictor+\" VS \"+ 'Price')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "_ehiyNByLlU7",
        "outputId": "4a680ed0-cb27-414a-b912-f70bf0269a6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1IAAAHWCAYAAAB9mLjgAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABywUlEQVR4nO3deXxU1f3/8fdkIQuQAElISA0QICwKYmSTVVAKLlWoVAtfFKT8XFlE1CpWUL+tArZuIIoLRalAra1Ql9ZqEQgCArJYEQyBsIohYUlCEgghub8/+GbKJDN3MpNZbpLX8/HI40HuuXfmzGRIzuee8/kcm2EYhgAAAAAANRYS7A4AAAAAQF1DIAUAAAAAHiKQAgAAAAAPEUgBAAAAgIcIpAAAAADAQwRSAAAAAOAhAikAAAAA8BCBFAAAAAB4iEAKAAAAADxEIAUAqDfatm2rO++8M9jdsLTBgwdr8ODBwe4GANR5BFIAUA+9/fbbstlsioyM1A8//FCtffDgweratWsQeubanXfeKZvNZv+KiYlR9+7d9fzzz6u0tDTY3aumrKxM8fHxGjBggMtzDMNQSkqKrrzySvuxAwcOaMKECWrfvr0iIyOVlJSkQYMG6cknn3T7nE899ZTDexQdHa1LL71UTzzxhAoLC33yugAANRMW7A4AAPyntLRUc+bM0fz584PdlRqJiIjQW2+9JUnKz8/X3/72Nz388MPasmWL/vznP7u9PjMzUyEhgblHGB4erltvvVWvv/66Dh48qDZt2lQ7JyMjQ0eOHNGDDz4oSdq7d6969eqlqKgo/epXv1Lbtm31448/atu2bZo7d66efvrpGj33a6+9piZNmqioqEifffaZnnnmGX3xxRdav369bDab6bWfffaZ5y8WAFANgRQA1GNXXHGF3nzzTc2YMUPJycnB7o5bYWFhuv322+3f33///erTp4/ee+89vfDCC05fg2EYOnv2rKKiohQRERHI7mrs2LFauHChli9frscee6xa+7JlyxQSEqLRo0dLkl588UUVFRVpx44d1QKv3NzcGj/vL37xC8XHx0uS7r33Xo0aNUoffPCBvvrqK/Xt29fpNSUlJYqOjlajRo1q/DwAANdY2gcA9djjjz+u8vJyzZkzp0bnv/vuu+rRo4eioqLUokULjR49WocPH7a3z5s3T6GhocrPz7cfe/7552Wz2TR9+nT7sfLycjVt2lSPPvporfofEhJiz+c5cOCApAt5UD/72c/0r3/9Sz179lRUVJRef/11e1vVHKn8/Hw9+OCDatu2rSIiInTJJZdo3LhxOn78uP2c0tJSPfnkk+rQoYMiIiKUkpKiX//6126XFPbv319t27bVsmXLqrWVlZXpr3/9q4YMGWIPAPft26dLLrnE6exVy5Yta/q2VHPNNddIkvbv3y/pv0s3t27dqkGDBik6OlqPP/64va1qjtTZs2f11FNPqWPHjoqMjFSrVq10yy23aN++ffZzKioq9NJLL+myyy5TZGSkEhMTdc899+jUqVNe9xsA6jICKQCox1JTUzVu3Di9+eabOnr0qOm5zzzzjMaNG6e0tDS98MILmjZtmlatWqVBgwbZA6eBAweqoqJCX375pf26devWKSQkROvWrbMf2759u4qKijRo0KBav4bKwXxcXJz9WGZmpsaMGaOf/vSnevnll3XFFVc4vbaoqEgDBw7U/PnzNWzYML388su699579f333+vIkSOSLgQIN998s/7whz/opptu0vz58zVy5Ei9+OKL+uUvf2naN5vNpv/5n//Rt99+q++++86h7dNPP9XJkyc1duxY+7E2bdro8OHD+uKLL7x5K1xy9h6dOHFC119/va644gq99NJLGjJkiNNry8vL9bOf/UxPP/20evTooeeff14PPPCACgoKtHPnTvt599xzjx555BH1799fL7/8siZMmKClS5dq+PDhKisr8+nrAYA6wQAA1DuLFy82JBlbtmwx9u3bZ4SFhRlTp061t1999dXGZZddZv/+wIEDRmhoqPHMM884PM63335rhIWF2Y+Xl5cbMTExxq9//WvDMAyjoqLCiIuLM2699VYjNDTUOH36tGEYhvHCCy8YISEhxqlTp2rc5/HjxxuNGzc28vLyjLy8PGPv3r3Gs88+a9hsNuPyyy+3n9emTRtDkvHpp59We4w2bdoY48ePt38/a9YsQ5LxwQcfVDu3oqLCMAzD+NOf/mSEhIQY69atc2hfuHChIclYv369ab+/++47Q5IxY8YMh+OjR482IiMjjYKCAvuxnTt3GlFRUYYk44orrjAeeOABY+XKlUZxcbHpc1R68sknDUlGZmamkZeXZ+zfv994/fXXjYiICCMxMdH+OFdffbUhyVi4cGG1x7j66quNq6++2v79H//4R0OS8cILL1Q7t/I9WrdunSHJWLp0qUP7p59+6vQ4ADQEzEgBQD3Xrl073XHHHXrjjTf0448/Oj3ngw8+UEVFhW677TYdP37c/pWUlKS0tDStXr1a0oWldv369VNGRoYkaffu3Tpx4oQee+wxGYahjRs3SrowS9W1a1c1a9bMo74WFxcrISFBCQkJ6tChgx5//HH17dtXK1ascDgvNTVVw4cPd/t4f/vb39S9e3f9/Oc/r9ZWWZTh/fffV5cuXdS5c2eH1165XK7ytbty6aWXKj093aEYRnFxsT788EP97Gc/U0xMjP34ZZddph07duj222/XgQMH9PLLL2vkyJFKTEzUm2++6fb1VOrUqZMSEhKUmpqqe+65Rx06dNAnn3yi6Oho+zkRERGaMGGC28f629/+pvj4eE2ZMqVa28XvUWxsrH760586vEc9evRQkyZN3L5HAFAfUWwCABqAJ554Qn/60580Z84cvfzyy9Xas7KyZBiG0tLSnF4fHh5u//fAgQP11FNP6cyZM1q3bp1atWqlK6+8Ut27d9e6dev005/+VF9++aVuu+02j/sZGRmpjz76SNKFQCA1NVWXXHJJtfNSU1Nr9Hj79u3TqFGjTM/JysrS7t27lZCQ4LS9JkUgxo4dq4cfflgbNmxQv379tHLlSpWUlDgs66vUsWNH/elPf1J5ebl27dqljz/+WM8995zuvvtupaamaujQoW6f729/+5tiYmIUHh6uSy65RO3bt692zk9+8pMaFZbYt2+fOnXqpLAw10OCrKwsFRQUuMzj8qRQBgDUFwRSANAAtGvXTrfffrveeOMNp9XlKioqZLPZ9M9//lOhoaHV2ps0aWL/94ABA1RWVqaNGzdq3bp1GjhwoKQLAda6dev0/fffKy8vz37cE6GhoTUKJKKiojx+bFcqKirUrVs3vfDCC07bU1JS3D7GmDFj9Otf/1rLli1Tv379tGzZMjVv3lw33HCDy2tCQ0PVrVs3devWTX379tWQIUO0dOnSGr3+QYMG2av2ueLr96hly5ZaunSp03ZXQSgA1GcEUgDQQDzxxBN69913NXfu3Gpt7du3l2EYSk1NVceOHU0fp3fv3mrUqJHWrVundevW6ZFHHpF0YXD/5ptvatWqVfbvg619+/YOBRNcnfPNN9/o2muvdbsHkyvJyckaMmSI3n//fc2cOVOff/657rzzzhqXGu/Zs6ckuVx66U/t27fXpk2bVFZW5jDzWPWcf//73+rfv79PAzQAqMvIkQKABqJ9+/a6/fbb9frrrysnJ8eh7ZZbblFoaKiefvppGYbh0GYYhk6cOGH/PjIyUr169dLy5ct16NAhhxmpM2fOaN68eWrfvr1atWrl/xflxqhRo/TNN99Uy7GSZH+dt912m3744QenOUpnzpxRcXFxjZ5r7Nixys3N1T333KOysjKny/rWrVvntMLdP/7xD0kXcp8CbdSoUTp+/LheeeWVam0Xv0fl5eX67W9/W+2c8+fPO5TDB4CGghkpAGhAfvOb3+hPf/qTMjMzddlll9mPt2/fXr/73e80Y8YMHThwQCNHjlTTpk21f/9+rVixQnfffbcefvhh+/kDBw7UnDlzFBsbq27dukm6sA9Sp06dlJmZWW0vp2B55JFH9Ne//lW33nqrfvWrX6lHjx46efKkPvzwQy1cuFDdu3fXHXfcob/85S+69957tXr1avXv31/l5eX6/vvv9Ze//MW+X5U7o0aN0v3336+///3vSklJcTojN3fuXG3dulW33HKLLr/8cknStm3btGTJErVo0ULTpk3z9Vvg1rhx47RkyRJNnz5dmzdv1sCBA1VcXKx///vfuv/++zVixAhdffXVuueeezR79mzt2LFDw4YNU3h4uLKysvT+++/r5Zdf1i9+8YuA9x0AgolACgAakA4dOuj222/XO++8U63tscceU8eOHfXiiy/q6aeflnQhP2jYsGG6+eabHc6tDKT69eunkJAQh+OZmZle5Uf5Q5MmTbRu3To9+eSTWrFihd555x21bNlS1157rb2IRUhIiFauXKkXX3xRS5Ys0YoVKxQdHa127drpgQcecLvUsVJMTIxuuukmvf/++xozZozTZYKPP/64li1bprVr12rp0qUqKSlRq1atNHr0aM2cObPGRTR8KTQ0VP/4xz/0zDPPaNmyZfrb3/6muLg4DRgwwB4kS9LChQvVo0cPvf7663r88ccVFhamtm3b6vbbb1f//v0D3m8ACDabUXUNBwAAAADAFDlSAAAAAOAhlvYBAPzq5MmTOnfunMv20NBQymcDAOoclvYBAPxq8ODBWrt2rcv2Nm3a6MCBA4HrEAAAPkAgBQDwq61bt+rUqVMu26OioihWAACocwikAAAAAMBDFJsAAAAAAA9RbEJSRUWFjh49qqZNmzrd9wMAAABAw2AYhk6fPq3k5GSHvRKrIpCSdPToUaWkpAS7GwAAAAAs4vDhw/bN250hkJLUtGlTSRferJiYmCD3BgAAAECwFBYWKiUlxR4juEIgJdmX88XExBBIAQAAAHCb8kOxCQAAAADwEIEUAAAAAHiIQAoAAAAAPEQgBQAAAAAeIpACAAAAAA8RSAEAAACAhwikAAAAAMBDBFIAAAAA4CECKQAAAADwEIEUAAAAAHgoqIFURkaGbrrpJiUnJ8tms2nlypXVztm9e7duvvlmxcbGqnHjxurVq5cOHTpkbz979qwmTZqkuLg4NWnSRKNGjdKxY8cC+CqsITuvSKszc7X/eHGwuwIAAADUe0ENpIqLi9W9e3ctWLDAafu+ffs0YMAAde7cWWvWrNF//vMfzZw5U5GRkfZzHnzwQX300Ud6//33tXbtWh09elS33HJLoF5C0OWXnNO4RZt1zfNrNWHxFg35wxqNW7RZBSVlwe4aAAAAUG/ZDMMwgt0JSbLZbFqxYoVGjhxpPzZ69GiFh4frT3/6k9NrCgoKlJCQoGXLlukXv/iFJOn7779Xly5dtHHjRl111VU1eu7CwkLFxsaqoKBAMTExtX4tgTRu0Wat33tc5Rf9GENtNvXvEK8lE3sHsWcAAABA3VPT2MCyOVIVFRX65JNP1LFjRw0fPlwtW7ZUnz59HJb/bd26VWVlZRo6dKj9WOfOndW6dWtt3LjR5WOXlpaqsLDQ4asuys4rUkZWnkMQJUnlhqGMrDyW+QEAAAB+YtlAKjc3V0VFRZozZ46uu+46ffbZZ/r5z3+uW265RWvXrpUk5eTkqFGjRmrWrJnDtYmJicrJyXH52LNnz1ZsbKz9KyUlxZ8vxW8OniwxbT9wgkAKAAAA8AfLBlIVFRWSpBEjRujBBx/UFVdcoccee0w/+9nPtHDhwlo99owZM1RQUGD/Onz4sC+6HHBtWkSbtreNaxygngAAAAANi2UDqfj4eIWFhenSSy91ON6lSxd71b6kpCSdO3dO+fn5DuccO3ZMSUlJLh87IiJCMTExDl91UbuEJhqUlqBQm83heKjNpkFpCUqNJ5ACAAAA/MGygVSjRo3Uq1cvZWZmOhzfs2eP2rRpI0nq0aOHwsPDtWrVKnt7ZmamDh06pL59+wa0v8Eyf0y6+neIdzjWv0O85o9JD1KPAAAAgPovLJhPXlRUpL1799q/379/v3bs2KEWLVqodevWeuSRR/TLX/5SgwYN0pAhQ/Tpp5/qo48+0po1ayRJsbGxmjhxoqZPn64WLVooJiZGU6ZMUd++fWtcsa+ui40O15KJvbX/eLEOnChW27jGzEQBAAAAfhbU8udr1qzRkCFDqh0fP3683n77bUnSH//4R82ePVtHjhxRp06d9PTTT2vEiBH2c8+ePauHHnpIy5cvV2lpqYYPH65XX33VdGlfVXW5/DkAAAAA36lpbGCZfaSCiUAKAAAAgFQP9pECAAAAAKsikAIAAAAADxFIAQAAAICHCKQAAAAAwEMEUgAAAADgIQIpAAAAAPAQgRQAAAAAeIhACgAAAAA8RCAFAAAAAB4ikAIAAAAADxFIAQAAAICHCKQAAAAAwEMEUgAAAADgIQIpAAAAAPAQgRQAAAAAeIhACgAAAAA8RCAFAAAAAB4ikAIAAAAADxFIAQAAAICHCKQAAAAAwEMEUgAAAADgIQIpAAAAAPAQgRQAAAAAeIhACgAAAAA8RCAFAAAAAB4ikAIAAAAADxFIAQAAAICHCKQAAAAAwEMEUgAAAADgIQIpAAAAAPAQgRQAAAAAeIhACgAAAAA8RCAFAAAAAB4KaiCVkZGhm266ScnJybLZbFq5cqXLc++9917ZbDa99NJLDsdPnjypsWPHKiYmRs2aNdPEiRNVVFTk344DAAAAaNCCGkgVFxere/fuWrBggel5K1as0FdffaXk5ORqbWPHjtV3332nzz//XB9//LEyMjJ09913+6vLAAAAAKCwYD759ddfr+uvv970nB9++EFTpkzRv/71L914440Obbt379ann36qLVu2qGfPnpKk+fPn64YbbtAf/vAHp4EXAAAAANSWpXOkKioqdMcdd+iRRx7RZZddVq1948aNatasmT2IkqShQ4cqJCREmzZtcvm4paWlKiwsdPgCAAAAgJqydCA1d+5chYWFaerUqU7bc3Jy1LJlS4djYWFhatGihXJyclw+7uzZsxUbG2v/SklJ8Wm/AQAAANRvlg2ktm7dqpdffllvv/22bDabTx97xowZKigosH8dPnzYp48PAAAAoH6zbCC1bt065ebmqnXr1goLC1NYWJgOHjyohx56SG3btpUkJSUlKTc31+G68+fP6+TJk0pKSnL52BEREYqJiXH4AgAAAICaCmqxCTN33HGHhg4d6nBs+PDhuuOOOzRhwgRJUt++fZWfn6+tW7eqR48ekqQvvvhCFRUV6tOnT8D7DAAAAKBhCGogVVRUpL1799q/379/v3bs2KEWLVqodevWiouLczg/PDxcSUlJ6tSpkySpS5cuuu6663TXXXdp4cKFKisr0+TJkzV69Ggq9gEAAADwm6Au7fv666+Vnp6u9PR0SdL06dOVnp6uWbNm1fgxli5dqs6dO+vaa6/VDTfcoAEDBuiNN97wV5cBAAAAQDbDMIxgdyLYCgsLFRsbq4KCAvKlAAAAgAasprGBZYtNAAAAAIBVEUgBAAAAgIcIpAAAAADAQwRSAAAAAOAhAikAAAAA8BCBFAAAAAB4iEAKAAAAADxEIAUAAAAAHiKQAgAAAAAPEUgBAAAAgIcIpAAAAADAQwRSAAAAAOAhAikAAAAA8BCBFAAAAAB4iEAKAAAAADxEIAUAAAAAHiKQAgAAAAAPEUgBAAAAgIcIpAAAAADAQwRSAAAAAOAhAikAAAAA8BCBFAAAAAB4iEAKAAAAADxEIAUAAAAAHiKQAgAAAAAPEUgBAAAAgIcIpAAAAADAQwRSAAAAAOAhAikAAAAA8BCBFAAAAAB4iEAKAAAAADxEIAUAAAAAHiKQAgAAAAAPBTWQysjI0E033aTk5GTZbDatXLnS3lZWVqZHH31U3bp1U+PGjZWcnKxx48bp6NGjDo9x8uRJjR07VjExMWrWrJkmTpyooqKiAL8S38nOK9LqzFztP14c7K4AAAAAcCEsmE9eXFys7t2761e/+pVuueUWh7aSkhJt27ZNM2fOVPfu3XXq1Ck98MADuvnmm/X111/bzxs7dqx+/PFHff755yorK9OECRN09913a9myZYF+ObWSX3JOU5fvUEZWnv3YoLQEzR+Trtjo8CD2DAAAAEBVNsMwjGB3QpJsNptWrFihkSNHujxny5Yt6t27tw4ePKjWrVtr9+7duvTSS7Vlyxb17NlTkvTpp5/qhhtu0JEjR5ScnFyj5y4sLFRsbKwKCgoUExPji5fjsXGLNmv93uMqv+jHEWqzqX+HeC2Z2DsofQIAAAAamprGBnUqR6qgoEA2m03NmjWTJG3cuFHNmjWzB1GSNHToUIWEhGjTpk0uH6e0tFSFhYUOX8GUnVekjKw8hyBKksoNQxlZeSzzAwAAACymzgRSZ8+e1aOPPqoxY8bYI8OcnBy1bNnS4bywsDC1aNFCOTk5Lh9r9uzZio2NtX+lpKT4te/uHDxZYtp+4ASBFAAAAGAldSKQKisr02233SbDMPTaa6/V+vFmzJihgoIC+9fhw4d90EvvtWkRbdreNq5xgHoCAAAAoCaCWmyiJiqDqIMHD+qLL75wWKeYlJSk3Nxch/PPnz+vkydPKikpyeVjRkREKCIiwm999lS7hCYalJbgMkcqNZ5ACgAAALASS89IVQZRWVlZ+ve//624uDiH9r59+yo/P19bt261H/viiy9UUVGhPn36BLq7tTJ/TLr6d4h3ONa/Q7zmj0kPUo8AAAAAuBLUGamioiLt3bvX/v3+/fu1Y8cOtWjRQq1atdIvfvELbdu2TR9//LHKy8vteU8tWrRQo0aN1KVLF1133XW66667tHDhQpWVlWny5MkaPXp0jSv2WUVsdLiWTOyt/ceLdeBEsdrGNWYmCgAAALCooJY/X7NmjYYMGVLt+Pjx4/XUU08pNTXV6XWrV6/W4MGDJV3YkHfy5Mn66KOPFBISolGjRmnevHlq0qRJjfthhfLnAAAAAIKvprGBZfaRCiYCKQAAAABSPd1HCgAAAACsgEAKAAAAADxEIAUAAAAAHiKQAgAAAAAPEUgBAAAAgIcIpAAAAADAQwRSAAAAAOAhAikAAAAA8BCBFAAAAAB4iEAKAAAAADxEIAUAAAAAHiKQAgAAAAAPEUgBAAAAgIcIpAAAAADAQwRSAAAAAOAhAikAAAAA8BCBFAAAAAB4iEAKAAAAADxEIAUAAAAAHiKQAgAAAAAPEUgBAAAAgIcIpAAAAADAQwRSAAAAAOAhAikAAAAA8BCBFAAAAAB4iEAKAAAAADxEIAUAAAAAHiKQAgAAAAAPEUgBAAAAgIcIpAAAAADAQwRSAAAAAOAhAikAAAAA8BCBFAAAAAB4KKiBVEZGhm666SYlJyfLZrNp5cqVDu2GYWjWrFlq1aqVoqKiNHToUGVlZTmcc/LkSY0dO1YxMTFq1qyZJk6cqKKiogC+Ct/KzivS6sxc7T9eHOyuAAAAAHAhqIFUcXGxunfvrgULFjhtf+655zRv3jwtXLhQmzZtUuPGjTV8+HCdPXvWfs7YsWP13Xff6fPPP9fHH3+sjIwM3X333YF6CT6TX3JO4xZt1jXPr9WExVs05A9rNG7RZhWUlAW7awAAAACqsBmGYQS7E5Jks9m0YsUKjRw5UtKF2ajk5GQ99NBDevjhhyVJBQUFSkxM1Ntvv63Ro0dr9+7duvTSS7Vlyxb17NlTkvTpp5/qhhtu0JEjR5ScnFyj5y4sLFRsbKwKCgoUExPjl9fnzrhFm7V+73GVX/TjCLXZ1L9DvJZM7B2UPgEAAAANTU1jA8vmSO3fv185OTkaOnSo/VhsbKz69OmjjRs3SpI2btyoZs2a2YMoSRo6dKhCQkK0adMml49dWlqqwsJCh69gys4rUkZWnkMQJUnlhqGMrDyW+QEAAAAWY9lAKicnR5KUmJjocDwxMdHelpOTo5YtWzq0h4WFqUWLFvZznJk9e7ZiY2PtXykpKT7uvWcOniwxbT9wgkAKAAAAsBLLBlL+NGPGDBUUFNi/Dh8+HNT+tGkRbdreNq5xgHoCAAAAoCYsG0glJSVJko4dO+Zw/NixY/a2pKQk5ebmOrSfP39eJ0+etJ/jTEREhGJiYhy+gqldQhMNSktQqM3mcDzUZtOgtASlxl8IpKjoBwAAAFiDZQOp1NRUJSUladWqVfZjhYWF2rRpk/r27StJ6tu3r/Lz87V161b7OV988YUqKirUp0+fgPe5NuaPSVf/DvEOx/p3iNf8MelU9AMAAAAsJiyYT15UVKS9e/fav9+/f7927NihFi1aqHXr1po2bZp+97vfKS0tTampqZo5c6aSk5Ptlf26dOmi6667TnfddZcWLlyosrIyTZ48WaNHj65xxT6riI0O15KJvbX/eLEOnChW27jG9pmoyop+F1u/97imLN9ORT8AAAAgCIIaSH399dcaMmSI/fvp06dLksaPH6+3335bv/71r1VcXKy7775b+fn5GjBggD799FNFRkbar1m6dKkmT56sa6+9ViEhIRo1apTmzZsX8NfiK6nx/w2gpP9W9Kvq4op+F58PAAAAwP8ss49UMFlhHylXVmfmasLiLS7bF0/opSGdWrpsBwAAAFBzdX4fKVxART8AAADAegikLK6mFf0AAAAABA6BVB1gVtEPAAAAQOAFtdgEqsvOK9LBkyUOVfvMKvoBAAAACDwCKYvILzmnqct3OFToG5SWoPlj0hUbHS6pekU/AAAAAMHB0j6LuO/dbdXKnGdk5ened7e6uAIAAABAsBBIWUB2XpE2Zp9w2rYx+4T2Hy8OcI8AAAAAmCGQsoBN+0+atn/lIsgCAAAAEBwEUpZgvieyzbQVAAAAQKARSFlAn9Q48/Z25u0AAAAAAotAygLaJTRRv/bOg6V+7eOo1AcAAABYDIGURbw2tocGpSU4HBuUlqDXxvYIUo8AAAAAuEIgZRGGmzwpAAAAANZBIGURU5fv0Pq9xx2Ord97XFOWbw9SjwAAAAC4QiBlAdl5RcrIylO54TgrVW4YysjKYx8pAAAAwGIIpCzg4MkS0/YDJwikAAAAACshkLKANi2iTdvbxlG1DwAAALASAikLaJfQRIPSEhRqc9x6N9Rm06C0BMqfAwAAABZDIGUR88ekq3+HeIdj/TvEa/6Y9CD1CAAAAIArYcHuAC6IjQ7Xkom9tf94sQ6cKFbbuMbMRAEAAAAWRSBlManxBFAAAACA1bG0DwAAAAA8xIyUxWTnFengyRKW9gEAAAAWVqtA6ty5c9q/f7/at2+vsDBistrILzmnqct3KCMrz35sUFqC5o9JV2x0eBB7BgAAAKAqr5b2lZSUaOLEiYqOjtZll12mQ4cOSZKmTJmiOXPm+LSDDcXU5Tu0fu9xh2Pr9x7XlOXb7d9n5xVpdWau9h9ng14AAAAgmLwKpGbMmKFvvvlGa9asUWRkpP340KFD9d577/mscw1Fdl6RMrLyVG4YDsfLDUMZWXn65vApjVu0Wdc8v1YTFm/RkD+s0bhFm1VQUhakHgMAAAANm1eB1MqVK/XKK69owIABsl20iexll12mffv2+axzDcXBkyWm7b9ZsdPtbBUAAACAwPEqkMrLy1PLli2rHS8uLnYIrFAzbVpEm7bvPFrocraKZX4AAABA4HkVSPXs2VOffPKJ/fvK4Omtt95S3759fdOzBqRdQhMNSktQaJUgNNRmU9efxJhee+AEgRQAAAAQaF6V2nv22Wd1/fXXa9euXTp//rxefvll7dq1Sxs2bNDatWt93ccGYf6YdE1Zvt2hal//DvF6aFiaRizY4PK6tnGUSAcAAAACzatAasCAAdqxY4fmzJmjbt266bPPPtOVV16pjRs3qlu3br7uY4MQGx2uJRN7a//xYh04Ueywj9SgtASt33vcYXlfqM2m/h3i2WsKAAAACAKbYVRJvmmACgsLFRsbq4KCAsXEmC+lC4aCkrJqs1XsMQUAAAD4Xk1jA69mpP7xj38oNDRUw4cPdzj+r3/9SxUVFbr++uu9eVi4YDZbBQAAACDwvCo28dhjj6m8vLzaccMw9Nhjj9W6U5XKy8s1c+ZMpaamKioqSu3bt9dvf/tbXTyJZhiGZs2apVatWikqKkpDhw5VVlaWz/pgJanxjTWkU0uCKAAAACDIvAqksrKydOmll1Y73rlzZ+3du7fWnao0d+5cvfbaa3rllVe0e/duzZ07V88995zmz59vP+e5557TvHnztHDhQm3atEmNGzfW8OHDdfbsWZ/1AwAAAAAu5lUgFRsbq+zs7GrH9+7dq8aNfTdbsmHDBo0YMUI33nij2rZtq1/84hcaNmyYNm/eLOnCbNRLL72kJ554QiNGjNDll1+uJUuW6OjRo1q5cqXP+hFI2XlFWp2Z63R/KLM2AAAANDyMD4PHqxypESNGaNq0aVqxYoXat28v6UIQ9dBDD+nmm2/2Wef69eunN954Q3v27FHHjh31zTff6Msvv9QLL7wgSdq/f79ycnI0dOhQ+zWxsbHq06ePNm7cqNGjRzt93NLSUpWWltq/Lyws9FmfvZVfck5Tl+9wWlDCkOGyjWITAAAADY/Z2JHxYWB4NSP13HPPqXHjxurcubNSU1OVmpqqLl26KC4uTn/4wx981rnHHntMo0ePVufOnRUeHq709HRNmzZNY8eOlSTl5ORIkhITEx2uS0xMtLc5M3v2bMXGxtq/UlJSfNZnb01dvkPr9x53OLZ+73FNWb7dtA0AAAAND+PD4PNqRio2NlYbNmzQ559/rm+++UZRUVG6/PLLNWjQIJ927i9/+YuWLl2qZcuW6bLLLtOOHTs0bdo0JScna/z48V4/7owZMzR9+nT794WFhUENprLzihzuJlQqNwynxy9u23+8mOITAAAADYi7sSPjw8DwKpCSJJvNpmHDhmnYsGG+7I+DRx55xD4rJUndunXTwYMHNXv2bI0fP15JSUmSpGPHjqlVq1b2644dO6YrrrjC5eNGREQoIiLCb/321MGTJV5fe+AE/1EAAAAaEndjR8aHgVHjQGrevHm6++67FRkZqXnz5pmeO3Xq1Fp3TJJKSkoUEuK4+jA0NFQVFRWSpNTUVCUlJWnVqlX2wKmwsFCbNm3Sfffd55M+BEKbFtFeX9s2jv8kAAAADYm7sSPjw8CocSD14osvauzYsYqMjNSLL77o8jybzeazQOqmm27SM888o9atW+uyyy7T9u3b9cILL+hXv/qV/bmmTZum3/3ud0pLS1Nqaqpmzpyp5ORkjRw50id9CIR2CU00KC1B6/ceV/lFe2SF2mzq3yFekly2cbcBAACgYXE3dmR8GBg24+LdbS3m9OnTmjlzplasWKHc3FwlJydrzJgxmjVrlho1aiTpQgn0J598Um+88Yby8/M1YMAAvfrqq+rYsWONn6ewsFCxsbEqKChQTEyMv16OqYKSMk1Zvt1p5RVJLtuoygIAANDwmI0dGR/WTk1jA48DqbKyMnXu3Fkff/yxunTpUuuOWoEVAqlK+48X68CJYrWNa1ztboJZGwAAABoexoe+V9PYwONiE+Hh4Tp79mytOgfXPvnmqNbvO66BaQm6f0gHh7bUeP6DAAAA4L8YHwaPV0v7nn32We3Zs0dvvfWWwsK8LvxnGVaYkdqwN0//89bmasffu+sq9WkfF4QeAQAAAA2P32akJGnLli1atWqVPvvsM3Xr1k2NGztGwR988IE3D9ugOQuiJOmXb36lA3NuDHBvAAAAAJjxKpBq1qyZRo0a5eu+NFivrMoybX919d5qy/wAAAAABI9HgVRFRYV+//vfa8+ePTp37pyuueYaPfXUU4qKivJX/xqE9fuOm7avy8ojkAIAAGigsvOKdPBkCQUlLMajQOqZZ57RU089paFDhyoqKkrz5s1TXl6e/vjHP/qrfw1C//bx2ph90mX7wLSEAPYGAAAAVpBfck5Tl++gxLlFhXhy8pIlS/Tqq6/qX//6l1auXKmPPvpIS5cuVUVFhb/61yBMvjbNtJ3ZKAAAgIZn6vIdWr/XceXS+r3HNWX59iD1CBfzKJA6dOiQbrjhBvv3Q4cOlc1m09GjR33esYZm0R09nR8f5/w4AAAA6q/svCJlZOWpvEqB7XLDUEZWnvYfLw5Sz1DJo0Dq/PnzioyMdDgWHh6usrIyn3aqIXrnq4MKtdkcjoXabHpn48Eg9QgAAADBcvBkiWn7gRP+C6Sy84q0OjOXYM0Nj3KkDMPQnXfeqYiICPuxs2fP6t5773UogU75c89U3nGo6uI7DqnxjUk0BAAAaCDatIg2bW8b5/uxIDlZnvEokBo/fny1Y7fffrvPOtNQubvj8N0PBXry79/xoQYAAGgg2iU00aC0BK3fe9xheV+ozab+HeL9clP9vne3aWP2CYdjGVl5uvfdrVp+91U+f766zqNAavHixf7qR4Pm7o7DOxsOaNuhfIdjlYmGSyb29mPPAAAAECzzx6RryvLtDjfT+3eI1/wx6T5/ruy8ompBVKWN2SfsK6TwX15tyAvfapfQxLR9y8FT1Y5VXfYHAACA+iU2OlxLJvbW/uPFOnCi2K/pHZv2u96KR5K+yj7BmLMKAikLeGVVltfXHjhBIAUAAFCfpcYHIj/eMG21mbY2TB5V7YN/rN933P1JLvgj0RAAAAANS5/UOPP2dubtDRGBlAV0SYoxbb+kWaTT0uiD0hKYjQIAAECttUtoon7tnQdL/drH+X3MWRdLrrO0zwLSkpqatv9qQKrWZB4PSKIhAAAAGqbXxvaoVtyislK0v9TlkusEUpZgviY1ulGYlkzsrYw9udp+OF9Xtm6ugWkJAeobAAAAGoJAFreoNHX5Dq3f65jmUleqUxNIWUBybJRpe2xUmMYt2lwnI3UAAADULYEpbnFhOd/F49tKdaU6NTlSFlDhpn3B6n0uI3UAAACgLjp4ssS0/cAJa+dLEUhZgLsfws6jhQ47WkuOkToAAABQ17RpEW3abvXq1ARSFuBuRsqM1SN1AAAA+E9drHZXqV1CEw1KS6iz1anJkbIAd9G4GatH6gAAAKid7LwiHTxZ4lD8wZ/V7pw9n7/MH5NerVJgXalOTSBVB6RfEqvtRwqqHe/bzv81/QEAABAcZsGSP6rdBaMUeTAqBfoKS/ss4OP/HDVtP1F8zunxKrOgAAAAqEdcBUsT39mijKw8n+fQmwVn/pYa31hDOrWsM0GURCBlCSddBEqVDp064/T4hn0n6uR6WAAAAJirLA3uLFj6+uAp02u9yaE3ez4KnDlHIGUBQzq19Ppaik0AAADUP+5Kg5vxJoe+rpciDwYCKQtIodgEAAAALuKuGFmvts19Wu2urpciDwYCKQtwdwegS1JTp8f7tafYBAAAQH3krjT4W+N6qX+HeIe22lS7q+ulyIOBqn0W4C6adVVTosoSVgAAANQjZqXB/VHtri6XIg8GAikLcLch766c006Pb8y+UGyCOwQAAFhDIPffQf1Xk2ApNd53n7XK58vYk6vth/N1ZevmGpiW4JPHro8IpCygNhvyHjhBIAUAQLAFY/8dNBy+DJbM8Dn2DDlSFtAuoYmau/hwxkSax7ok/gEAEHzB3H8H8JX73t3mEERJUkZWnu59d2uQemRtlg+kfvjhB91+++2Ki4tTVFSUunXrpq+//trebhiGZs2apVatWikqKkpDhw5VVlZWEHvsuey8Ip0qKXPaVnj2vHq18W1VFgAA4DtW3n8nO69IqzNz2QMIbmXnFWlj9gmnbZXpJHBk6aV9p06dUv/+/TVkyBD985//VEJCgrKystS8eXP7Oc8995zmzZund955R6mpqZo5c6aGDx+uXbt2KTIyMoi9rzl3Vfvu7NdWUY2OkPgHAIAF1WT/nUDf+GSJFjy1af9J0/avsk9wA78KSwdSc+fOVUpKihYvXmw/lpqaav+3YRh66aWX9MQTT2jEiBGSpCVLligxMVErV67U6NGjnT5uaWmpSktL7d8XFhb66RXUjLtpwRg/VGUBAAC+YcX9d8yWGi6Z2Dvg/UFdYF4O2lUV6YbM0kv7PvzwQ/Xs2VO33nqrWrZsqfT0dL355pv29v379ysnJ0dDhw61H4uNjVWfPn20ceNGl487e/ZsxcbG2r9SUlL8+jrccVe173zFhQ92anxjDenUkiAKAAALsdr+O1ZeagjrSo6NMm3/SXPz9obI0oFUdna2XnvtNaWlpelf//qX7rvvPk2dOlXvvPOOJCknJ0eSlJiY6HBdYmKivc2ZGTNmqKCgwP51+PBh/72IGrDinSwAAFBz88ek+3Rz1NqoyVJDoKqjBWdM2384Zd7eEFl6aV9FRYV69uypZ599VpKUnp6unTt3auHChRo/frzXjxsREaGIiAhfdbPWtrhZk/r1gZPMQgEAYGH+2BzVW9yghXfMF++ZL/xrmCw9I9WqVStdeumlDse6dOmiQ4cOSZKSkpIkSceOHXM459ixY/a2uuDz3cdM2//1nevZNQAAYB1WWIYfzKWGwagSSGVC3+iT2sK0/ap2cQHqSd1h6Rmp/v37KzMz0+HYnj171KZNG0kXCk8kJSVp1apVuuKKKyRdKByxadMm3XfffYHurtfc7RXVLIrqOgAA1AXZeUU6eLIk6IWh5o9J15Tl2/1S8dfZawxGlUAqE/pWu4Qm6tsuzmkJ9L7t4lgd5YSlA6kHH3xQ/fr107PPPqvbbrtNmzdv1htvvKE33nhDkmSz2TRt2jT97ne/U1pamr38eXJyskaOHBncznugV2qcPth+1GV7j7YX7hBY5ZczAAANmVUCCTP+WGpo9hqDUSWQyoS+t/D2HtUC8MqfMaqzGYZh6SWPH3/8sWbMmKGsrCylpqZq+vTpuuuuu+zthmHoySef1BtvvKH8/HwNGDBAr776qjp27Fjj5ygsLFRsbKwKCgoUExPjj5dham1mrsYv3uKy/bWx6Vq++YhlfjkDANAQmQUSU5Zv1/q9xx0q5YXabOrfIb7eDOr/582vtGFf9dmK9JRm2n443+V1qx8e7PMbwNl5Rbrm+bUBfc6GxAq5fsFU09jA8oFUIAQ7kFqdmasJJoFU1+QY7f7xdL3+5QwAgNWNW7TZabB0ZZtm2nLglMvr6sOg3l3gYmbxhF4a0qmlT/vjbuzkj+dEw1HT2MDSxSYaityCs6btO48WshcEAABBZLY3k1kQJdWPcuOb9lefiaopf1QJpDIhrIBAygL+7aZqn5n68MsZAACrc7c3k5n6Mag3L42d1rJxQKsEWm0TZDRMBFIWcLjB/3IGAMDa3M2A9GrTvF4P6t2Vxn7+1isCviGxlTZBrm8oKV8zlq7a11CktIjW98eKXLbHNQ5Tfkm50xyp+vDLGQAAq6ucAXFVUMKf5catwF1p7MtTmgV8Q2IrbYJcX1it+qTVUWxCwS828d7mQ3r0g29dtj9906Va9X0eH2oAAIKooKTMZWnoyr/H9XlQX5PXj7rNVUGVhlbgrKaxATNSFnDstHmxidOl57njAgBAkNVkBiQ1vv7+jWYGqH6rLKhS1cUFzvh5OyKQsoCTxedM248XlUqq37+cAQCoK/zx99jZJr9WxXikfnJXUOXACQKpqgikLKBLkvlywsuSYwPUEwAAEEjkpFjT2sxc7TiSrytbN9fAtIRgdycgKCnvOQIpC/g+57Rp++4fCwPUEwAArKcuzdZ4auryHVq/97jDsfV7j2vK8u0NKifFKg6eKNbIBet1qqTMfqx5dLg+nDRAKXHmgUZd566gSn37v+cLlD+3gO2HzTfy234oPzAdAQDAQvJLzmncos265vm1mrB4i4b8YY3GLdqsgosGuXWZ2Sa/lTkpCKyqQZQknSop080LvgxSjwKLkvKeYUbKAmxu6iba1OALKwIAGqD6PltDToq1rM3MrRZEVTpVUqZ1WXn1fpkfBUU8w4yUBcQ3jahVOwAA9U1DmK0hJ8VadhzJN23fdsh8BVF9khrfWEM6tSSIcoNAygKaRponk7prBwCgvqnJbE1dV5mTEmqzORwPtdk0KC2BQWyAXXFJM9P2K1s3D0xHUGcQSFlAToH5PlLu2gEAqG8aymxNfctJyc4r0urM3Do5Y3h1p5Zq7qJSYvPo8Hq/rA+eI0fKAkrOna9VOwAAvhbsSnkNpYJYfclJqS9l3D+cNEA3L/jSadU+oCoCKQtIcJMD1bJpZIB6AgBo6Kw0IJ4/Jl1Tlm936Etdnq0xU5c2uXUWZNeXwiApcdHaPmuY1mXladuhU073kQr2TQZYB4GUBRw5Zb4O/LCbdeIAAPiKlQbE9WW2pr5wFWQ/NKyjw7FKFxcGqWs/t4FpCdUCKCvdZIA1kCNlAbmnS920kyMFAPA/q1bKo4KYNbgKsn+z4lvT6+pDYRDJ/CYDGiYCKQuwuWnnhwQACISGUCkP3jELsnceLTS9tj4UBrHqTQYEF2N0CzhfYb7hbpmbdgAAfKGhVMqD59wF2V1/ElOvy7hzkwHOEEhZQIvG5sUm3LUDAAD4k7sg+9mfd6tXZdyr4iYDnKHYhAXcM6idHv3A9friewe3D2BvAAANVU3uugdjdoEqacHnrhz95Zc0q9eFQRpKOX54hkDKApJizcubu2sHAMAXrHbXnSpp1lKTcvR1qYy7pxpSOX7UjM0wjAafgFNYWKjY2FgVFBQoJiYm4M9/ze9XK/uE67uA7eOjterhIQHsEQCgoRq3aLPLu+6BLn9upb7gv+rrrFNNNfTX3xDUNDYgR8oCzIIoSdp3/EJ7dl6RVmfmUhkGAOA388ekWyLXhSpp1tXQy9E39NeP/2JpXx0xbtFmljYAAPzOKpvgWjVfCwAqMSNlAVFh7naSEhvAAUADFowVCcG+6261fC0AqIoZKQuIbxKhw/lnTc8xW9rAHTkAqJ8acrEFqqQBsDpmpCzgRHGp19eyARwA1F9Tl+9o0CsSrJKvZXXkUAPBwYyUBdhsNkneFU9kaQMA1E+VxRaqcrYiob7us+SLfK36+t5IDXvGErACAikLiAoPVfG5CpftYTbpvJM4q2+7uHr3RwEAcEFNii00jw5vEANpb/YmaghBhtmMJeXhAf9jaZ8FxESa/0IPDXVejMLmvkYFAKCOqkmxhYa+9M9MfX9vKA8PBB+BlAW0b9nEtL3U2XSUpA37TvCLEgAsxlf5KpXFFkKr3DULtdk0KC1Bxv8NmBlIV9cQgoyazFgC8K86FUjNmTNHNptN06ZNsx87e/asJk2apLi4ODVp0kSjRo3SsWPHgtdJL1zS3Pyuoxl+UQKANeSXnNO4RZt1zfNrNWHxFg35wxqNW7RZBSVlXj+mWbEFBtKu+fu9sUJxB8rDA8FXZ3KktmzZotdff12XX365w/EHH3xQn3zyid5//33FxsZq8uTJuuWWW7R+/fog9dRzBWfOeX1tWAjr+wDACu5fuk0b9p1wOJaRlaf7lm7Vsruu8uoxzYotMJB2zV/vjZXyrigPDwRfnZiRKioq0tixY/Xmm2+qefPm9uMFBQVatGiRXnjhBV1zzTXq0aOHFi9erA0bNuirr75y+XilpaUqLCx0+Aqm2tzROl/hXbU/AIDvZhay84qqBVGVfLEM29nmuO6W/jXkgbS/3hur5V1RHh4IrjoRSE2aNEk33nijhg4d6nB869atKisrczjeuXNntW7dWhs3bnT5eLNnz1ZsbKz9KyUlxW99r4na/IFtyHccAcBbvl6Gt2m/8yDK3p5t3u4tBtKu+fq9sWLeVeWM5eqHB2vxhF5a/fBgLZnYu95UJQSszvJL+/785z9r27Zt2rJlS7W2nJwcNWrUSM2aNXM4npiYqJycHJePOWPGDE2fPt3+fWFhYVCDqYIz592eE2qzMXUPAD7i+7LR5susK397+3pPo9rus1Sf91jyxR5UF6tJ3lWw3kNvysMDqD1LB1KHDx/WAw88oM8//1yRkZE+e9yIiAhFRET47PFqqyaL8/p3iHdYk80dRwDwjicb3dZUn9QWpu2XtorRuEWb/ZZb4+lA2kq5Pv5m9t54EkiSkwagKksv7du6datyc3N15ZVXKiwsTGFhYVq7dq3mzZunsLAwJSYm6ty5c8rPz3e47tixY0pKSgpOp73QyE3BiEYhNi2Z2Ftzb+mmkenJ+v0vLmfqHgC85I+Kbu0SmqhvuzinbX3bxen5z/ZYKrfGark+gebN0k5y0gBUZelA6tprr9W3336rHTt22L969uypsWPH2v8dHh6uVatW2a/JzMzUoUOH1Ldv3yD23DOGmzkpQ4bS//czPfrBt1q5/age+et/lP6/n+nwCfPBAACgekEJf80sLLy9hwalJTgcG5SWoMeu72yp3Jpg5vpYoWy45H0gSU4agItZemlf06ZN1bVrV4djjRs3VlxcnP34xIkTNX36dLVo0UIxMTGaMmWK+vbtq6uu8q7UbDCUu1nbV1Yhnapyl+xUSZluXvClts8a5seeAbCK+pLLEsjXYbZ8zR9lo13l5KzOzDW9ria5Nb5834KR62OlpYS1Wdrp67wrAHWbpQOpmnjxxRcVEhKiUaNGqbS0VMOHD9err74a7G55pHGjUJ0uLff4ulMlZVqXlaeBVe6AAqg/rDQArY1gvA6zWYf5Y9I1Zfl2v+SeVs3Jqc0MmD/et2Dk+vi+uIf3fBFIUtwBgGTxpX3OrFmzRi+99JL9+8jISC1YsEAnT55UcXGxPvjggzqVHyVJHVo28frabYdO+bAnAKymvuSy3L90W7VZgMrNav3B3fK1AyeK/PK8ztQmt8YfP/9A5/pYrWw4RSMA+EqdC6Tqoz05p72+9srWzd2fBKBOstoA1Fv+3qzWGXezDo/+7Vungd297/onsPMmt8afP/9A5vr4o7hHbbRLaKLmLmbzmkeHM9MEoMbq/NK++qC4rMKr65pHh7OsD6jHrLxvjSc5OzXZrNbXr8PdrMP3Lm5gbcw+4VX5c3fcFRVyxp8//0Dm+lhtBig7r6ha3nGlUyVlfvn5A6ifCKTqiObR4Q6/+JtHh+vDSQOC2CMA/ma1AajkXc7OnhzzZXR7jnk/K+9K5fI1ZwUl2iVEKyvX9SzIV34I7LzJEXK3ZCTMzdYZNdEQc32sfIMCQN3C0r46YvusYfrTxN568Kdp+tPE3to+a5hS4swHWQDqNivuW+NNzo7bLR48n6ypEVfL18b0bm16Xe3DE0feLtFzt1bhfIWf3jgfs9rSPl/coLBKGXcAwcWMVB0yMC2BpXxAA/O7kZdpxIL1DjPSMVFhemZkV5Or/MPbstFDOrXU2xsOunzca7q09Gk/K7lavpadV6T//Xi3y+v6uNhY11vezoBYcUbSG1Z7HWazle7K39eXKpoAfIMZKQsIddfu69ujAOqMJ1Z+p8Iz5x2OFZ45r9+s3Bnwvng7s3B1p5aKiXR+3y4mMszvN4hS4xtrSKeW9gFyu4Qm6tfeebDUr31cwPO1XAUSVpyR9IYvXoevZ4C8LbZRX6poAvANZqQsICzMpvLzrpdohBNJAQ1SbTYO9YfazCx0TorR5gMnnR4PhtfG9qi2j1TlzIKv1WYGxJ/7XQWSt6/DXzNA3hTbsNr/RwDBRyBlAefLzde5l7lpB1A/BTspvmplPm8Dguy8IqdBlCRtPnAyKAPQQFatk7wPJALdT3/x9nX4eyNfT4ptBPv/IwDrIZCyAHdxEnEUULd4UhrcTE1ngHz1fJXMZgG8CQisPAANVNW62gZE9aW6nievw2ozQFbL9QIQfARSAOAjvl6G5G4GqHl0uMYt2uzzZU/uZgHcBQRVAzsGoP9VXwKiQLBaAF6bJZqVfH3TA0BwEUjVIfwCBqzNH8uQzGaApizf7vPnq+ksgLOAwCyQrO0ANBjqy+9cf7yOQLw3VgzArZbrBSC4CKTqCH/cdQbgO/5ahuRqD6YDJ/zzfDWdBXA2kDYLJOtS0QR/DnoDGZz543UEMiDwxQyQr1k11wtAcBBI1RH8AgaszV/LkFwNwE6WlPrl+dzNArRwsZzwoWEdTQO7kyXnglY0wdPg5f6l27Rh3wmHYxlZebpv6VYtu+sqr/oQjBkJfwzeAx0QWDUAr8u5XgB8h0Cqjrj4blzl9/wCBqzD3aZ8YSGeb2NgNgDb+UOh6bUXL3vyJJBwNwvw/GdZzgO74poFdoHMEfImeMnOK6oWRFXasO+E179zAx2A+GPwHoyAoD5ULbRarhcA32FD3jrO1QaYAAKrwk37+QrPy2+6G4B1TY4x3eQ0v+Scxi3arGueX6sJi7doyB/WaNyizSooKTN93N+NvEwxUY732WKiwnTPoFRlZOU5vbGz82jNAjtfb6xqxpvNUzftdx5E2duzzdudqQxAzG6I+Zq3mycH+jFrquqmynWJFXO9APgGgVQdxy9gIDiqBgT+GCy5e8xnf95N/TvEOxy7eNmTN4GEJD2x8jsVnjnvcKzwzHnN/vR70+u6/sR1YFdZYdAsqPNlkOVt8JJ3+pzp4+YVmc+8OROMACQYn0f+HjlXOctrdtMDQN3E0r46ItRms0yyLdCQ1bYyndkyO09zeZpGuV725O0yrNosJ3z25930h3/t8bjC4LwxV/g8f8jb5VQJTRuZXpfQJMLjvgQjAPFHoQYrFn+oK6ya6wWgdgik6oj+HeL5BQxYgLeV6cwCMEOG07Zf9rzEtC9meUfeBhI1WU64+8fTTgfSl1/SzGlg5y6ou2vJ19p2MN+hrbb5Q97mrPVJjTO9rk8783ZnghWA+GPwXtvHrC8l5T1VH3K9AFRHIFVHLJnYWxl7crX9cL6ubN1cA9MSgt0loMFxFxCYVaYbt2iz6TI7Z20l5xyX11VlNpPh7SyIu+tmXN9Zk5dv16mLluTFRIXpmZFd7d9XDezcBWdbDpyqdqy2BQyOFpwxbf/hlPP2dglN1K99nNOCE/3ax3k9+A3GjIQ/Bu+Vj+np3yP2UbqADZmB+oVAqo5gHykg+Go6y1N1sOQuAHOm3DD09cFT6tW2ubYdzPd4JqNdQhM1jw53CHgqNY8Od7nU0N3syesZ+53mT/1m5U6Xs0fugjMz3lY0q02u02tje1QLeip/53ormDMSZoN3T2eIvA2I2EcJQH1EIFVH8AcICD5vZ3ncBWBmxvdrq6jwIx7PZGTnFTkNoiTpVEmZvjl8Ss9/luV0QOxq9uShYR01YsH6ao9XdfbIl8u3vM0fqk2ukz+DHqvMSAQyIGIfJQD1FYFUHcE+UkDw1XSWp6razMhclhyrJROTPR7UuwveHv3bt/o+57TDsYysPN377lYtv/sqp4HE6sxc08f87ocCPfn376oNzm/rZZ7rZZZ35e3vN1/kOlkl6JF8n1sUyIDIyvsoNdScLQC+QSBVx7GRHxoKKwx43M3yuJqRcbdcrqy8Qhud7E/Ut91/c3I8XZ7lLnirGkRV2pj9301njSo3cNw95jsbDmjboXyHY+v3HteZMvNcrxk3dNbkZeZ5V57yV65ToPkjtyjQAZEVy6YHK2fLCr/HAPgOgVQdx74dqO+slKTubiC586jzGRmz5XLzx6TrvqVbnT7exdvOOBuAmb03ZsFbu4TGysotcvk6Vn9/TE9mHveoxPuVbZq5LBqx5cAp9WrTXNsOOc/1en2t53lXNeGPXKfa8nQg7Y/copoGRFX76m0lRCuWTQ90zpaVfo8B8B0CqTqCfaRQX1hhIOktd3fWl2w4YFrGe8nE3npvyyFtzD6h/u3jdWvPFGXnFTmdNZGkDftO6JvD+Xr+sz1OB2Du3htXwdvgTvH63493u3wdyzcfVnae4yax7kq839brEqeBVKU7+7VVVKPquV4PDUvTiAUbqp3vi+XLVio57c1A2l+5Re4+xy2iGzktcORuieb5CsNlm5X2UQpGzpaVfo8B8B0CqTqCfaRQ11lpIOktszvr6a1dz8hkZOXpy6xcTVm+w758beX2o3r2H7v1+PWdTZ/zNyu/1e6jjsvw1u89ronvbNHXB92XDXe1r5NZIOVstqrycQ+ccD6TldLcfHB+6U9itaR79Vwvd3lXvli+bIVcJ28G0v7KLXI3Q/T8Z3uc9vVkietKh5LrGSnJWkFtoHO2rPZ7DIDvuJuph0Usmdhbqx8erMUTemn1w4O1ZGJvlgOgTjEbSLpSkwFPoM0fk67+HeIdjvXvEK8J/dqaXnfvu9uq5VedKinTbz9xHdBI0s4fCp0Wm3EWRF3s4vemaq5TZf6QM11aNTV93N+s2On05/j8Z3s0KC1BoTbHwXSozaZBaQkOuV5DOrWscS5XfVi+XDmQNisa5Iw/3xtXn+OHhnV02dedPxSaPqbZjFSlqj//YAj0Z86Kv8cA+AYzUnWIFe6qomExW4bnyRI9b+/IWnGQ7erOenae65wjSSoqLXd6vPDseXVp1VS7f6xe/KFLUlPtdlEUwp22cY1NZwFd5Q+N7nWJ7l/mOrjdebT6YLry5/jh5P6S5NHseSDyZ4Kd4O/tDIg/3xtXn2N3M4Rmavv/MVA/p0DnbFnx9xgA3yCQAlCN2QDckOHxEj0rDiRrq+qNDbMqcSnNo3T41BmXj1V01nlVu8jwUNM+uNusd9yizabLyXw9kD5RfM7t8i1ng+Xa5s+4GoBbJcG/NgNpf+cWVf0cu+urWdEQb/8/BuPnFMicLSv/HgNQOwRSAKpxtwzP01wPb6t9SdZKUnfHcLGyqUmEeUDkKsjafjjfdOBq9t7UdBbQ04G0mcqAwNnsubvB8pKJvZWxJ0/bD5/Sla2ba2Bagtvnc/eYtU3w99UMSU0H0s6eL9C5Re766o//j/cv3VbtBkRGVp7uW7pVy+66yuvHNePtZ85bden3GICaI5AC4MDdANwZd0v0Ktw8p1luhZWS1M1k5xU53QtKknbnFCkmMkyFTmaemkSEulz2J7mudndxAOLsvdl22H0OlTezgN/+kO/xhsSSeXA+b8wVXs1ImD3mUzdf6nWCvz9mSMwG0jV5vkAu7Tbrq6//P7qrWumvQgyBngULdOAGIDAIpIAGrupdcHfL8My4GpzXZkaq0qETxfrPkXyFhdgsEUh5+r7NvLGLnv3n9w5BSPPocL0y5kqNXbTJ5XWuqt1dzNkg2x/LyVyVKpfMNyR2F5zfteRr07Lxzrh7zE37T7p8fZJ5ZTZ/lKo2C0D+582vAj4j421fK/kqsNu033kQZW/PPuGX/+/sIwXAFywfSM2ePVsffPCBvv/+e0VFRalfv36aO3euOnXqZD/n7Nmzeuihh/TnP/9ZpaWlGj58uF599VUlJiYGseeAtbn6w/7QsI5eP2ZlQLQ2M1c7juTb77rWdEbK2dKmgyeKNXLB+moByIeTBiglzvtlaN5y/b6lmV7XMzVO22cN07qsPG075HhHuibLvgI5I+FtIYLvfnC+IfEve5rvP2RWNt7VjIT7gN+8gpyrQNLfpaqr/hyDNSNTE4H5zJnfRHFfB9Bz7CMFwFcsH0itXbtWkyZNUq9evXT+/Hk9/vjjGjZsmHbt2qXGjS/8onvwwQf1ySef6P3331dsbKwmT56sW265RevXrw9y74HAeG/zIW3c/99NXi/mKs/jvne3VVuKlpGVp7LyCpcD+y6tmjqt2lbpaP4Zpf/vZ05nXcy0iA53ugHo/DHpuvmV9So4U71s+M9e+VLfPDnM9HH9wVU+x/kK1+/bxQHRwLSEakt6/JE/4Yu9cjzNn3pnwwFtO5TvcGz93uMqOee8mEZNuOqnu75c1S7eqwT/QO8xFKwZGavok9rCtP2qds7L9NcG+0gB8BXLB1Kffvqpw/dvv/22WrZsqa1bt2rQoEEqKCjQokWLtGzZMl1zzTWSpMWLF6tLly766quvdNVVgV8WAQTKt0fy9fNXN9hndFZuP6oZH3yrDyf1V3LzKJdLSU4Ul7rM59mYfcJlGeuHhnXUiAWub1A888nuanlAp0rKNHn5NjWNCNVpJ7lATSNC9fxnWU7v1o5966tqQVSlgjNlWpeVF9A8A3ezBx9O8rz8t+SfPDB/lFw2y5+6so3rDYm/PnjKZYXB9NbNTPfEctXPmhRw8CZADXSp6rzT5pvcHi8yb6/r2iU0Ua82zbXFyWegV5vmfgkwrLiPFIEUUDdZPpCqqqCgQJLUosWFu1hbt25VWVmZhg4daj+nc+fOat26tTZu3Og0kCotLVVp6X//OBUWmm8yCFjVxUFUpfMVhm5esF792se7XEpyfbck08f97mjh/yVG52r74f8u0XO3V5KzYgqSnBYnqHS6tNzl3Vqz2S9JWrU716+BVNXZPHezB7t+LKxVQOTLpVT+KrnsKji5rdclTgOpSuP7tVVUuPOiGVOWb/eqn+4CJW8C1ECXqk5oGmnaHtckwqfPZ0XhYc6zKF0dry32kQLgK3UqkKqoqNC0adPUv39/de3aVZKUk5OjRo0aqVmzZg7nJiYmKicnx+njzJ49W08//bS/uwv41XubD7msdne+wnmFvcqlJL1Sm5k+9plz550utbutl3muS6DFN2nkl8d1lQc1uGO86XWVPw2rbJ7tjyWDhouslZTmUabXXZYcqyUTnRfN8LafrvpSlac/j0CWqg7G0jYrCVaOGPtIAfCFOhVITZo0STt37tSXX35Zq8eZMWOGpk+fbv++sLBQKSkpJlcA1rPRzeyImZNFrmeIJOnPWw5rX26xw7H1e4/rTJn3uS7+cOPlyX55XFeJ4e5yfaw26PXHkkFX743kfdEMb/vprwT+QJbcb5fQRH3bxTldatu3XVy9H2QHa9lbbX/Gnu4xxj5SQP1UZwKpyZMn6+OPP1ZGRoYuueS/d8WTkpJ07tw55efnO8xKHTt2TElJzpcvRUREKCKi/i+XQP1S9Q9339Q4rdx+1KvHcncnf8+x6kv4yg1DWw6cUtfkGKdL7jomNnF6XW39JDZSPxScrXa8d1v/5E+YJYZ/ffCUuiU31bdHT1drvzifw1cbufqKr2bI3CXNe5sj5k0/A5HAH6iZxYW396g2yK7MZ6zvgr3szdOfcU3KmFthY2UAgWH5QMowDE2ZMkUrVqzQmjVrlJqa6tDeo0cPhYeHa9WqVRo1apQkKTMzU4cOHVLfvn2D0WXAp1z94R7d23wWNTo8RCVl1QuPx0SGaUinlnp7w0Gv+pN9vNjp8YMnvN9/yszMmy7Vsk2HazXI9CSwcXeH/LyLGDQ8LKTe7xXj7r05UXIuYIPF+pTA35AH2e0SmqhX2+ZO8+v8dbOkNmq7sbRVlv0C8A3LB1KTJk3SsmXL9Pe//11Nmza15z3FxsYqKipKsbGxmjhxoqZPn64WLVooJiZGU6ZMUd++fanYh3rhriVfVxtkZGTl6fsfzQsxOAuipAsFIWw29xvgunzcc9Ur70lS6Xl3u0W5Ft0o1OnjNo8O13VdW+m6rq28GmR6E9i4u0O++8fqs1HShXyOu9752mn57/qyV0xNZw8CMVj0xSbPwWAW1DfUQbarmexMP8xw14bbjaXr+f9/ANX5pySOD7322msqKCjQ4MGD1apVK/vXe++9Zz/nxRdf1M9+9jONGjVKgwYNUlJSkj744IMg9hrwjey8IpeV0HJrURZ55fYfvL7WH966o6eaVwlsKjfdrZQa31hDOrX0aKBpdvfYlcrE8NAqwWaozaauyTGmz7fl4CmH/CDJcalZXWf23gxKSwhoEFDTTZ6tIr/knMYt2qxrnl+rCYu3aMgf1mjcos0qMKlo2RCszcx1u8WBVbibBa3v//8BVGf5QMowDKdfd955p/2cyMhILViwQCdPnlRxcbE++OADl/lRQF3y8X+8y4FyJxh/1NNTmjk93q99nPqlxWv7rGH608TeevCnafrTxN7aPmuYUuLMZ0DMVN499mZgM39Muvp3cKzQ179DvO4f0sHr/hw44f49z84r0urMXEsPuly9N4HO5wl2bo2nvAnqG4IdR/JN27cdcl1SP9DcfebM1OT/P4C6x/JL+4CGpOqyn9W7c03PbxweomInS/iaRISoqNT1PfuCM+dq3VdnXG26evF+QWa5TgPTEny2L1Rtcmgqc1aq7qO1OtP852HGbKlZXcqtsko+T10qKR2Iwhh1VZKbfbSSY83L6geSNxtSV7JaYA/ANwikAAtwNZAucpGPVOknzaOVFBtV7bqmkaH65Fvn+6hJUkxUI0neFYeIDLPprJOKCzGRoXprXC+XJX4DPQCvzYyFq5/HQ8M6et0fs6Vm/irj7U9WyOepKyWl61NhDF9rGWseSMU3tVaFXbPPnLcbSwOouwikgABzlmzuaiDtbpPTkek/0f1DOihjT562Hz5lnzlZm5lrGkj9T+/W2nE436v+OwuiJKnwbLlO1qBqW6AG4LWZsfBmryRv70gzW+G9yuD8vS2HtDH7hPq3j9etPYO/J2DV/+M1DeqtVjY/EOraEk2zG0J1JbAH4DsEUkCAmM1yuBpIH3BzJ/t/+rTWuEWbnS4Ji4kMU+HZ6hvIxkSG6bZeKVqx/QeXm4DabBeq0FXVpVVTl1XrpP/eWbfCbIXk3cDG7V5Jk13vleTNHemazlY0xEG2OwdPFGvkgvU69X8FG1ZuP6pn/7FbH04aUKv8Om+ZLdE0C+qbR4e7/H9staWdvlaXlmhezJcbSwOou2yGYVirtFEQFBYWKjY2VgUFBYqJMa/K5Q9tH/vE7TkH5twYgJ6gKl8OXsct2ux0sNClVVOnG9xWemBIB728em+144vG9dQ7Gw+6HIDcP7idRr+5qdp17911lfq0j1NBSZlpzpKztoeGpWnEgg0u+7r64cGWHDh4MrBZnZmrCYu3uGxfPKGXhnRq6fQxzd5TVwPi7LwiXfP8WpfP9/dJ/fT8Z1kNcpDtTvr/fmYPoi7WPDpc22cNs38fqCDU1f9xdzmCZgG4VZd2+pI3/28AwJ9qGhswIwU44e3u9ZXe23xIG/f/d6mR2SyHWRAlSRv2n1CozVZtkLUwY5/TpWSVMyc7DjtfZnbv0q3aPmuY27unrtrqy91jV2q61MjZPShv7ki3S2iifu3jnM4A9msfp+c/y6pz+VOBsDYz12kQJUmnSi6Uze72k9iAFfFwN5PpatkrSzuZyQFQdxFIAU54u3v9oZPF+vmrG+yFBVZuP6oZH3yrmTd2MX2+rj+J0e6jp6sFJ+mtnefdlBuGaT6OJKfL+qT/DjIrq+OZBRnO2up7HoC7pUY1WYbl6US/q9NLSs9rx5GCascb0iDblZqUzX4zY3/AgtCaLtGs+n+KQhT/ZZUlwQBQUwRSqPfcLetZm5mrHUf+W+La3R3icX/cpP8ccZxFysjK011LvtbWgydVXmVQfL7C0FMf7TLt45192+iZf3zvcIc9JipMv+yZoq8P+n4flW2HTnldZrwmd4/rej5PTSpzXawmQbbZ0j5nuWqSnAZRF2tIg+yqrrikmWl7q5jIgM70eFs0oa4VWwDcqeu//wFPEEih3nK3PK9qorp0Ibfi8evNZ4+qBlGVNh846fIad/MTb284qMIzjjNIhWfO672vD5te16tNc207VH3fpkuTm+rbH1wvGbyydXM3PXLP2d3jurQfkhlXwaK7IPuud77WtkP5Dm3uZkDczUiYaciD7Ks7tVTz6HCXOVIJMeZltX0dhHpbNKGuFlsAqqovv/8BT4QEuwOAv9zx1lfVBr0ZWXm6Y9FXkqQRr6yvNgg7VVKmpz78LmB9rLTzaKHDIEq6MDj/+uApNY1wfr8jNipcz9/WXTFRju0xUWF69X96qLmLP1zNo8NrPBuVnVek1Zm52n+8uEbnmy2JrItS4xtrSKeW9sGsu6Bny8FTTn+OlTMgzribkejVtrlCbY6b+YbabBqUlmDZQbannxtvvTuxT7WNjsNCbFo6sY/bP25mGyR7a/6YdPXvEO9wrCbLXr29DrCS+vb7H6gJZqRQLzgr7vDtUedluv/zQ6He23JI+WecJ6oXl5lvguutRqE2nau67k9Sk4hQFZW6fs7Tpc5znQrOlOmh979xOpP1m5U79eGkAbp5wZfVZtw+nDTAbV+9ubPYEJLma3PnydUMiLsZid+N7KoRVX6OMVFhemZk11r0xj8CfUd67qeZ1fLLDEOa82mmJgxoa3qt2QbJ3vK2aALFFlDXNYTf/4AzBFKoM6rmMknSt0fynRZ3GJQWb/ZQen3tPr/3typnQZQk0yDKHbOqfecNQ9tnDdO6rDxtO3TK4X1zx+zOordL1OpDPk9FLa41W4ZnFiz9ZuVOl8Gy1ar23ffutmr5XhlZebr33a1afvdVPn0udwO3Gy9PMr3eHzNSlbwtmkCxBdRVDeH3P+AMgRQsz1Uu04eTBujmV9ZXyz86X2Hoi8zqA6yLHSs464eeWkvlH66BaQkeFZbw9s5iQ0iad7sMz0XOmrtclydcBEvT399hGixb6S6vWdGMjdknfN5XdwO3nELz/+P+mJECGqqG8PsfcIYcKViKs9yKm1/50mku009fXOO2iIMrURGhtehl3eDtH66a3Fl0pnKJWl3L5/GEu9f41vheHue6VAauznKr3JW4d/WzCIZN+10XW5Gkr1wEWd5y98erVax5sQkGdoDvNITf/4AzzEjBElzlVozudYkKzjjPETp73vs7yrGR4Tpe5DxHyl/axkXr8Mkz1WYrrmzjfK+omvB2BuRiVUvV1ubOYn3fY0oyf43e5LrUl6p9eafNZ4BOFJX69PncLbNMaBpJNTwggBrC73+gKgIpBJyzPSbuWLSpWrnujKw8fXc03y99KD7nn4ISZsb1bas1mXmmexM5G/Cdr6jQhn3V7+b3ax+n18b28PoPl6vg9aFhHb19iQ0iab4mr9GTXBd/LRcMtISmEabt8U3M2z1Vk4CfgR0QOA3h9z9QFYEUAsZs4O5qz6MTxf6ZNWoVG6WcQt/eIXdnSOeW+tWAVKd/ZNwN+Kq2XVwJzds/XK4KSpwsNn9fapI03BCS5n31Gt1V7asrwUCf1Djz9nbm7f7AwA4IvIbw+x+oRCAFv3BWYe/uJV9rc5UlbP6cdTLTo01zbT/s++eNDLM5XXLYr32c/Q+Lsz8y7gZ8Syb2VsaeXG0/nO+0+p5RtQa0G2YFJXYedb2Rr+TfamdW42z21B98vVwwGNolNFG/9nEuZ0993WdPqoQxsAMA+AOBFLzmbJDpqsLeK2OurBZEVfLXrJOZL74/5pfH/emliSo4U+509qgmnA34zPbmMWR4tW9PbfJyGkK1s0Dvh+Tr5YLB4mypqSeff09YuUpYoAJwAEBwEUjBY2aDzJ/NW6fTVfZFOlVSpglvbwp0N03luimN7K301s21JvO4+xM94G63eHf7PTkb1LkbhJqxUoEDf/FmHy1fqAvBkplAzp65WxIZjPcx0AE4ACC4KH8Oj92/dFu1ZWEZWXka8+bGakFUpSDUdjAVGe6f8ucrtv1gGvR4yqw0dkZWnmnbN4dPadyizbrm+bWasHiLhvxhjcYt2qyCkjK3pWobchlbd+/5xaX54VxqfGMN6dTS75+V+WPSPS4370/ubnoAAOoXZqRg6r3Nh7Rx/wn1bx+vW3umKDuvyGkOhCTt+vF0gHvnvdYtGut4cb7PH/dbJ/lFVTdP9WTZT22W4P1mxU7trvIzuXhWxdMCF1YscOAPnuTeILislD/m7UbWAIC6i0CqgXM1qP/2SL5+/uoGez7Myu1HNeODb3Xf1e2D1VWfimwUohCb5CzdJ8QmNYkIU+HZ6vtXNQq16Vy5dzlCO48W6Mm/f+fRsp/cAu+XIDorGlF1UHehiEWeth8+Va2IhVUGqIFm5dwbOGeFJZEE4ADQ8BBINVDu1vKPWLC+WpBxvsLQ/NV7A9xT/0iOjdKyiVdp9FtfVWt7/hfd9eD73zi9ztsgSpKWbDigbQfzHY65y7vJcbPJaZu4aB1xsslvl+Sm2umipLx0YVDXPDrcbT6HFQaogWbF3BtYHwE4ADQ85Eg1UOP+uMlpntO4P27Se5sPOZ2pqU9io8L16tp9TvOAFq3f7/Xjhrv4HxUTGaYtB055nHdzxSXNTJ9vxvWdneaIPDOyq+l1beMak89hwmq5N7A+d3mHBOAAUP8wI9UAVF2+l51XpP8ccT5b8c2RApWe9z6QqCtOlZR5vY+SmbIK58edLRO8mKtlP1d3aqmwEJvTkuNhITZd1S5OyzYdrtbWNs58VsX4vwCuKvI5LqhJ7g0lrlFVXdk8GQDgGwRS9Zir5XuxkeYV6w40gKpkzd2UIu76kxjtPnq6WhByaXJTfWuyZM5brpb9ZOcVudy36XyFobuWfO1yuaDZoG7bYed7elUin+MCT/f1osR1w2al4hcAAP8jkKrH7nt3mzZmO1bYy8jKU5ibBZ1nz9fzdX2SKgzz13hrj0u0KjrPaRAy8LkvnM4wNW4UqmKTOu+92jTXtkP5HuXduEtg3+Jkk+PKWaWTJedcDurI5/Ceq/9X9767VcvvvipIvYKVNMTcQgBoiMiRqqey84qqDfYqnXex/KxhsZm2Hjheom9/yHc49u0P+So8U6bld12lsBDH68NCbHr/nr6mORJvje/lcd5NbTbOPXDiwsyisz19yOfwjtn/q43ZJ9hjCgCABoRAqg7JzivS6szcGg3WNu0/GYAeWVtkmM1loDC4U4KLqy74y5bDOlVS5nDsVEmZfvbKl5r7aaaqTmgZhjTn00zTIgWVy35WPzxYiyf00uqHB2vJxN6my8HMAp6ebZqbvgZ3s0p1raCCJ59/f3H3/+orF0EWAACof1jaV0eMW7TZo5yMPTm+z+OpazomNlWz6Ainy/Nio8PVPDq8WrAkSU0iQlVU6nyJXsEZ10Uq3C2nq+Tpsh+zXKcpy7d7Xaa7ruRzWCsnyXxJqPk8JwAAqE8IpOoIV2WqXe0/lH/GvEpcXeJq41ybzIe1d/Rtq1t7prgMFD6cNEA3L/jSIZhqHh2uazq31N+2/eBVXyuLNPgyR8Is4PFFlTCr53OYlWl39fn3lz6pcebt7czbAQBA/UEgVUeY7T/kbBCcGu99bo3VuNrTypDrICvUJt3aM0WS60AhJS5a22cN07qsPG07dEpXtm6ugWkJmrdqj9d99WeRBmevo67MKnkrO6/IUmXa2yU0Ub/2cdqwr/oSvn7t4+rVew8AAMzVmxypBQsWqG3btoqMjFSfPn20efPmYHcpICoLClT1s8uTvX7MK1Nivb7WTKfEJh4dr4lZN13qtPDDR5MH1PgxBqYl6IFrO2pg2oW8KXfvXa+2zS1XpMFZQYn6wF3VQleff396bWwPDUpzzLEblJag18b2CHhfAABA8NSLQOq9997T9OnT9eSTT2rbtm3q3r27hg8frtzc3GB3ze9czYC0S2ii3m2dFyNwdbzSH267wrQ9vXUzp8f7tY9TbJTznJXYqHD95Z5+Tgegf7mnn8t9nWIizSdNr+7YUnufvUG//8XlGpmerN//4nLtffYGXfoT74NBd+/dW+M8r74H71ixTLs3RUMAAED9YzMMNxvq1AF9+vRRr1699Morr0iSKioqlJKSoilTpuixxx5ze31hYaFiY2NVUFCgmJgYf3e3mraPfeL2nFCbzWlBAbMckYKSsmr5M4PSEvTQsI4asWC9y+tWPzxYv37/G205WH2Pol5tmuut8b2cPu78MekqPFPmNO/ow0kDlBJ3YVDsbBna4RMlLq/7zcqdLgsq+CtHxtV7d3GBg/q6nM5qxi3aHPCfPwAAaLhqGhvU+UDq3Llzio6O1l//+leNHDnSfnz8+PHKz8/X3//+92rXlJaWqrS01P59YWGhUlJSLB1IDUpL8LpqWdUB/+rMXE1YvMXl+Ysn9NKVKc1rFUhUzTuqKWfX1SSo8ReCpeAL5s8fAAA0PDUNpOp8sYnjx4+rvLxciYmJDscTExP1/fffO71m9uzZevrppwPRvRoJD5HKTDbJbRSiWhUUqFqkoCbLpWpSxMCs2tvAtASPAiiz64JZUMHqFe0agvpeUAMAANRN9SJHylMzZsxQQUGB/evw4cNB7U/Wszeatu/5v3ZfFRQw2+S1asEEKxUxsFJfEHj8/AEAgJXU+UAqPj5eoaGhOnbsmMPxY8eOKSkpyek1ERERiomJcfgKtp4pzvvg6nhtzR+TTsEEAAAAwEt1fmlfo0aN1KNHD61atcqeI1VRUaFVq1Zp8uTJwe2cB/46aaAkqePjn+hcxYXlfHvczFTVBsulAAAAAO/V+UBKkqZPn67x48erZ8+e6t27t1566SUVFxdrwoQJwe6ax/wZPDlDDhAAAADguXoRSP3yl79UXl6eZs2apZycHF1xxRX69NNPqxWgAAAAAABfqPPlz30h2PtIAQAAALCGmsYGdb7YBAAAAAAEGoEUAAAAAHiIQAoAAAAAPEQgBQAAAAAeIpACAAAAAA8RSAEAAACAhwikAAAAAMBDBFIAAAAA4CECKQAAAADwUFiwO2AFhmFIurCLMQAAAICGqzImqIwRXCGQknT69GlJUkpKSpB7AgAAAMAKTp8+rdjYWJftNsNdqNUAVFRU6OjRo2ratKlsNltQ+1JYWKiUlBQdPnxYMTExQe0L6g4+N/AWnx14g88NvMHnBt4K9GfHMAydPn1aycnJCglxnQnFjJSkkJAQXXLJJcHuhoOYmBh+ycBjfG7gLT478AafG3iDzw28FcjPjtlMVCWKTQAAAACAhwikAAAAAMBDBFIWExERoSeffFIRERHB7grqED438BafHXiDzw28wecG3rLqZ4diEwAAAADgIWakAAAAAMBDBFIAAAAA4CECKQAAAADwEIEUAAAAAHiIQMpiFixYoLZt2yoyMlJ9+vTR5s2bg90lWMjs2bPVq1cvNW3aVC1bttTIkSOVmZnpcM7Zs2c1adIkxcXFqUmTJho1apSOHTsWpB7DiubMmSObzaZp06bZj/G5gTM//PCDbr/9dsXFxSkqKkrdunXT119/bW83DEOzZs1Sq1atFBUVpaFDhyorKyuIPYYVlJeXa+bMmUpNTVVUVJTat2+v3/72t7q4vhmfHWRkZOimm25ScnKybDabVq5c6dBek8/IyZMnNXbsWMXExKhZs2aaOHGiioqKAvYaCKQs5L333tP06dP15JNPatu2berevbuGDx+u3NzcYHcNFrF27VpNmjRJX331lT7//HOVlZVp2LBhKi4utp/z4IMP6qOPPtL777+vtWvX6ujRo7rllluC2GtYyZYtW/T666/r8ssvdzjO5wZVnTp1Sv3791d4eLj++c9/ateuXXr++efVvHlz+znPPfec5s2bp4ULF2rTpk1q3Lixhg8frrNnzwax5wi2uXPn6rXXXtMrr7yi3bt3a+7cuXruuec0f/58+zl8dlBcXKzu3btrwYIFTttr8hkZO3asvvvuO33++ef6+OOPlZGRobvvvjtQL0EyYBm9e/c2Jk2aZP++vLzcSE5ONmbPnh3EXsHKcnNzDUnG2rVrDcMwjPz8fCM8PNx4//337efs3r3bkGRs3LgxWN2ERZw+fdpIS0szPv/8c+Pqq682HnjgAcMw+NzAuUcffdQYMGCAy/aKigojKSnJ+P3vf28/lp+fb0RERBjLly8PRBdhUTfeeKPxq1/9yuHYLbfcYowdO9YwDD47qE6SsWLFCvv3NfmM7Nq1y5BkbNmyxX7OP//5T8Nmsxk//PBDQPrNjJRFnDt3Tlu3btXQoUPtx0JCQjR06FBt3LgxiD2DlRUUFEiSWrRoIUnaunWrysrKHD5HnTt3VuvWrfkcQZMmTdKNN97o8PmQ+NzAuQ8//FA9e/bUrbfeqpYtWyo9PV1vvvmmvX3//v3Kyclx+NzExsaqT58+fG4auH79+mnVqlXas2ePJOmbb77Rl19+qeuvv14Snx24V5PPyMaNG9WsWTP17NnTfs7QoUMVEhKiTZs2BaSfYQF5Frh1/PhxlZeXKzEx0eF4YmKivv/++yD1ClZWUVGhadOmqX///urataskKScnR40aNVKzZs0czk1MTFROTk4Qegmr+POf/6xt27Zpy5Yt1dr43MCZ7Oxsvfbaa5o+fboef/xxbdmyRVOnTlWjRo00fvx4+2fD2d8tPjcN22OPPabCwkJ17txZoaGhKi8v1zPPPKOxY8dKEp8duFWTz0hOTo5atmzp0B4WFqYWLVoE7HNEIAXUUZMmTdLOnTv15ZdfBrsrsLjDhw/rgQce0Oeff67IyMhgdwd1REVFhXr27Klnn31WkpSenq6dO3dq4cKFGj9+fJB7Byv7y1/+oqVLl2rZsmW67LLLtGPHDk2bNk3Jycl8dlCvsLTPIuLj4xUaGlqtStaxY8eUlJQUpF7BqiZPnqyPP/5Yq1ev1iWXXGI/npSUpHPnzik/P9/hfD5HDdvWrVuVm5urK6+8UmFhYQoLC9PatWs1b948hYWFKTExkc8NqmnVqpUuvfRSh2NdunTRoUOHJMn+2eDvFqp65JFH9Nhjj2n06NHq1q2b7rjjDj344IOaPXu2JD47cK8mn5GkpKRqBdnOnz+vkydPBuxzRCBlEY0aNVKPHj20atUq+7GKigqtWrVKffv2DWLPYCWGYWjy5MlasWKFvvjiC6Wmpjq09+jRQ+Hh4Q6fo8zMTB06dIjPUQN27bXX6ttvv9WOHTvsXz179tTYsWPt/+Zzg6r69+9fbXuFPXv2qE2bNpKk1NRUJSUlOXxuCgsLtWnTJj43DVxJSYlCQhyHmKGhoaqoqJDEZwfu1eQz0rdvX+Xn52vr1q32c7744gtVVFSoT58+geloQEpaoEb+/Oc/GxEREcbbb79t7Nq1y7j77ruNZs2aGTk5OcHuGizivvvuM2JjY401a9YYP/74o/2rpKTEfs69995rtG7d2vjiiy+Mr7/+2ujbt6/Rt2/fIPYaVnRx1T7D4HOD6jZv3myEhYUZzzzzjJGVlWUsXbrUiI6ONt599137OXPmzDGaNWtm/P3vfzf+85//GCNGjDBSU1ONM2fOBLHnCLbx48cbP/nJT4yPP/7Y2L9/v/HBBx8Y8fHxxq9//Wv7OXx2cPr0aWP79u3G9u3bDUnGCy+8YGzfvt04ePCgYRg1+4xcd911Rnp6urFp0ybjyy+/NNLS0owxY8YE7DUQSFnM/PnzjdatWxuNGjUyevfubXz11VfB7hIsRJLTr8WLF9vPOXPmjHH//fcbzZs3N6Kjo42f//znxo8//hi8TsOSqgZSfG7gzEcffWR07drViIiIMDp37my88cYbDu0VFRXGzJkzjcTERCMiIsK49tprjczMzCD1FlZRWFhoPPDAA0br1q2NyMhIo127dsZvfvMbo7S01H4Onx2sXr3a6Zhm/PjxhmHU7DNy4sQJY8yYMUaTJk2MmJgYY8KECcbp06cD9hpshnHRNtMAAAAAALfIkQIAAAAADxFIAQAAAICHCKQAAAAAwEMEUgAAAADgIQIpAAAAAPAQgRQAAAAAeIhACgAAAAA8RCAFAAAAAB4ikAIAwEfuvPNOjRw5MtjdAAAEAIEUACDo7rzzTtlsNs2ZM8fh+MqVK2Wz2QLen7fffls2m002m00hISG65JJLNGHCBOXm5ppe9/LLL+vtt98OTCcBAEFFIAUAsITIyEjNnTtXp06dCnZXJEkxMTH68ccfdeTIEb355pv65z//qTvuuMPpueXl5aqoqFBsbKyaNWsW2I4CAIKCQAoAYAlDhw5VUlKSZs+e7fKcL7/8UgMHDlRUVJRSUlI0depUFRcXS5JeeeUVde3a1X5u5WzWwoULHZ7jiSeeqFF/bDabkpKSlJycrOuvv15Tp07Vv//9b505c0Zvv/22mjVrpg8//FCXXnqpIiIidOjQoWpL+yoqKvTcc8+pQ4cOioiIUOvWrfXMM8/Y2w8fPqzbbrtNzZo1U4sWLTRixAgdOHCghu8YACCYCKQAAJYQGhqqZ599VvPnz9eRI0eqte/bt0/XXXedRo0apf/85z9677339OWXX2ry5MmSpKuvvlq7du1SXl6eJGnt2rWKj4/XmjVrJEllZWXauHGjBg8e7FX/oqKiVFFRofPnz0uSSkpKNHfuXL311lv67rvv1LJly2rXzJgxQ3PmzNHMmTO1a9cuLVu2TImJifb+DB8+XE2bNtW6deu0fv16NWnSRNddd53OnTvnVR8BAIFDIAUAsIyf//znuuKKK/Tkk09Wa5s9e7bGjh2radOmKS0tTf369dO8efO0ZMkSnT17Vl27dlWLFi20du1aSdKaNWv00EMP2b/fvHmzysrK1K9fP4/7lZWVpYULF6pnz55q2rSppAuB0Kuvvqp+/fqpU6dOio6Odrjm9OnTevnll/Xcc89p/Pjxat++vQYMGKD/9//+nyTpvffeU0VFhd566y1169ZNXbp00eLFi3Xo0CF78AcAsC4CKQCApcydO1fvvPOOdu/e7XD8m2++0dtvv60mTZrYv4YPH66Kigrt379fNptNgwYN0po1a5Sfn69du3bp/vvvV2lpqb7//nutXbtWvXr1qhbwuFJQUKAmTZooOjpanTp1UmJiopYuXWpvb9SokS6//HKX1+/evVulpaW69tprnbZ/88032rt3r5o2bWp/PS1atNDZs2e1b9++GvURABA8YcHuAAAAFxs0aJCGDx+uGTNm6M4777QfLyoq0j333KOpU6dWu6Z169aSpMGDB+uNN97QunXrlJ6erpiYGHtwtXbtWl199dU17kfTpk21bds2hYSEqFWrVoqKinJoj4qKMq0oWPX8qoqKitSjRw+H4KxSQkJCjfsJAAgOAikAgOXMmTNHV1xxhTp16mQ/duWVV2rXrl3q0KGDy+uuvvpqTZs2Te+//749F2rw4MH697//rfXr1+uhhx6qcR9CQkJMn8udtLQ0RUVFadWqVfblfBe78sor9d5776lly5aKiYnx+nkAAMHB0j4AgOV069ZNY8eO1bx58+zHHn30UW3YsEGTJ0/Wjh07lJWVpb///e/2YhOSdPnll6t58+ZatmyZQyC1cuVKlZaWqn///gF7DZGRkXr00Uf161//WkuWLNG+ffv01VdfadGiRZKksWPHKj4+XiNGjNC6deu0f/9+rVmzRlOnTnVabAMAYC0EUgAAS/rf//1fVVRU2L+//PLLtXbtWu3Zs0cDBw5Uenq6Zs2apeTkZPs5NptNAwcOlM1m04ABA+zXxcTEqGfPnmrcuHFAX8PMmTP10EMPadasWerSpYt++ctf2jf1jY6OVkZGhlq3bq1bbrlFXbp00cSJE3X27FlmqACgDrAZhmEEuxMAAAAAUJcwIwUAAAAAHiKQAgA0OJdddplDGfWLv5xV0QMAoCqW9gEAGpyDBw+qrKzMaVtiYqJ9010AAFwhkAIAAAAAD7G0DwAAAAA8RCAFAAAAAB4ikAIAAAAADxFIAQAAAICHCKQAAAAAwEMEUgAAAADgIQIpAAAAAPDQ/wd7RLgfn1VZLQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 12 : Statistical Feature Selection (Continuous Vs Continuous) using correlation value"
      ],
      "metadata": {
        "id": "g37ZXmVWMqU3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculating correlation matrix\n",
        "ContinuousCols=['Price', 'Kilometers_Driven', 'Mileage', 'Engine', 'Power', 'New_Price']\n",
        "\n",
        "# Creating the correlation matrix\n",
        "CorrelationData=UsedCarData[ContinuousCols].corr()\n",
        "CorrelationData"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "thA3KwZnNww2",
        "outputId": "f06e2afc-7f51-4fe2-8b24-474cf531819f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      Price  Kilometers_Driven   Mileage    Engine     Power  \\\n",
              "Price              1.000000          -0.008249 -0.343296  0.658047  0.772756   \n",
              "Kilometers_Driven -0.008249           1.000000 -0.062440  0.093030  0.033773   \n",
              "Mileage           -0.343296          -0.062440  1.000000 -0.638157 -0.537780   \n",
              "Engine             0.658047           0.093030 -0.638157  1.000000  0.866521   \n",
              "Power              0.772756           0.033773 -0.537780  0.866521  1.000000   \n",
              "New_Price          0.349140          -0.052234 -0.019606  0.153601  0.239839   \n",
              "\n",
              "                   New_Price  \n",
              "Price               0.349140  \n",
              "Kilometers_Driven  -0.052234  \n",
              "Mileage            -0.019606  \n",
              "Engine              0.153601  \n",
              "Power               0.239839  \n",
              "New_Price           1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f8d37237-d7c4-43dd-8455-758ab36d1436\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>New_Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.008249</td>\n",
              "      <td>-0.343296</td>\n",
              "      <td>0.658047</td>\n",
              "      <td>0.772756</td>\n",
              "      <td>0.349140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <td>-0.008249</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.062440</td>\n",
              "      <td>0.093030</td>\n",
              "      <td>0.033773</td>\n",
              "      <td>-0.052234</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mileage</th>\n",
              "      <td>-0.343296</td>\n",
              "      <td>-0.062440</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.638157</td>\n",
              "      <td>-0.537780</td>\n",
              "      <td>-0.019606</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Engine</th>\n",
              "      <td>0.658047</td>\n",
              "      <td>0.093030</td>\n",
              "      <td>-0.638157</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.866521</td>\n",
              "      <td>0.153601</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Power</th>\n",
              "      <td>0.772756</td>\n",
              "      <td>0.033773</td>\n",
              "      <td>-0.537780</td>\n",
              "      <td>0.866521</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.239839</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>New_Price</th>\n",
              "      <td>0.349140</td>\n",
              "      <td>-0.052234</td>\n",
              "      <td>-0.019606</td>\n",
              "      <td>0.153601</td>\n",
              "      <td>0.239839</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8d37237-d7c4-43dd-8455-758ab36d1436')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f8d37237-d7c4-43dd-8455-758ab36d1436 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f8d37237-d7c4-43dd-8455-758ab36d1436');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c3193015-4cf4-49ce-8cec-28a8f8ac3fc3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3193015-4cf4-49ce-8cec-28a8f8ac3fc3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c3193015-4cf4-49ce-8cec-28a8f8ac3fc3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b38ab0f4-fa77-44d8-a37d-a5e5810402e3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('CorrelationData')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b38ab0f4-fa77-44d8-a37d-a5e5810402e3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('CorrelationData');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "CorrelationData",
              "summary": "{\n  \"name\": \"CorrelationData\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5073744218776024,\n        \"min\": -0.343296419836299,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.0,\n          -0.008248536278492239,\n          0.3491397876836351\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.41195336331039356,\n        \"min\": -0.06244045798828513,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          -0.008248536278492239,\n          1.0,\n          -0.0522340242873648\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5930144859760554,\n        \"min\": -0.6381565229341678,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          -0.343296419836299,\n          -0.06244045798828513,\n          -0.019605663925119702\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.610747811068369,\n        \"min\": -0.6381565229341678,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.6580472262886926,\n          0.09303010087378562,\n          0.15360111927250217\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5925691467990649,\n        \"min\": -0.5377803286401772,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.7727557626733116,\n          0.033773199597564474,\n          0.23983914291594266\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.38494118832145036,\n        \"min\": -0.0522340242873648,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.3491397876836351,\n          -0.0522340242873648,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtering only those columns where absolute correlation > 0.5 with Target Variable\n",
        "# reduce the 0.5 threshold if no variable is selected\n",
        "CorrelationData['Price'][abs(CorrelationData['Price']) > 0.5 ]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IjkblXEvONgn",
        "outputId": "5758d3ed-93af-4f25-f5a6-99de91009ba6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price     1.000000\n",
              "Engine    0.658047\n",
              "Power     0.772756\n",
              "Name: Price, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Observation from Step 12\n",
        "\n",
        "inal selected Continuous columns:\n",
        "* **'Engine', 'Power'**"
      ],
      "metadata": {
        "id": "QjLDYysoOW6Y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 13: : Relationship exploration: Categorical Vs Continuous - Box Plots\n",
        "\n",
        "* When the target variable is Continuous and the predictor variable is Categorical we analyze the relation using Boxplots,  and\n",
        "* Measure the strength of relation using Anova test."
      ],
      "metadata": {
        "id": "9Dq7mcEWOqXM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Box plots for continuous Target Variable \"Price\" and Categorical predictors\n",
        "CategoricalColsList=['Year', 'Seats']\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "fig, PlotCanvas=plt.subplots(nrows=1, ncols=len(CategoricalColsList), figsize=(18,5))\n",
        "\n",
        "# Creating box plots for each continuous predictor against the Target Variable \"Price\"\n",
        "for PredictorCol , i in zip(CategoricalColsList, range(len(CategoricalColsList))):\n",
        "    UsedCarData.boxplot(column='Price', by=PredictorCol, figsize=(5,5), vert=True, ax=PlotCanvas[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fjxmZOm7O8dF",
        "outputId": "eb0c83a0-b7a6-43e7-daf5-cf019f60e5ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Observations from step 13"
      ],
      "metadata": {
        "id": "r47-TPnLPZHr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 14 : Statistical Feature Selection (Categorical Vs Continuous) using ANOVA test"
      ],
      "metadata": {
        "id": "DBpHgSGOPc1M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Defining a function to find the statistical relationship with all the categorical variables\n",
        "def FunctionAnova(inpData, TargetVariable, CategoricalPredictorList):\n",
        "    from scipy.stats import f_oneway\n",
        "\n",
        "    # Creating an empty list of final selected predictors\n",
        "    SelectedPredictors=[]\n",
        "\n",
        "    print('##### ANOVA Results ##### \\n')\n",
        "    for predictor in CategoricalPredictorList:\n",
        "        CategoryGroupLists=inpData.groupby(predictor)[TargetVariable].apply(list)\n",
        "        AnovaResults = f_oneway(*CategoryGroupLists)\n",
        "\n",
        "        # If the ANOVA P-Value is <0.05, that means we reject H0\n",
        "        if (AnovaResults[1] < 0.05):\n",
        "            print(predictor, 'is correlated with', TargetVariable, '| P-Value:', AnovaResults[1])\n",
        "            SelectedPredictors.append(predictor)\n",
        "        else:\n",
        "            print(predictor, 'is NOT correlated with', TargetVariable, '| P-Value:', AnovaResults[1])\n",
        "\n",
        "    return(SelectedPredictors)"
      ],
      "metadata": {
        "id": "VsVkM2wYPlQg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Calling the function to check which categorical variables are correlated with target\n",
        "CategoricalPredictorList=['Year', 'Seats']\n",
        "FunctionAnova(inpData=UsedCarData,\n",
        "              TargetVariable='Price',\n",
        "              CategoricalPredictorList=CategoricalPredictorList)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zcw-DD3WPxOH",
        "outputId": "edd5df24-96b4-4990-9a77-19103e0bbf22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "##### ANOVA Results ##### \n",
            "\n",
            "Year is correlated with Price | P-Value: 1.6984386551613156e-111\n",
            "Seats is correlated with Price | P-Value: 4.308201927795279e-124\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Year', 'Seats']"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Observation\n",
        "The results of ANOVA confirm our visual analysis using box plots above.\n",
        "\n",
        "* All categorical variables are correlated with the Target variable.\n",
        "\n",
        "Final selected Categorical columns:-\n",
        "'Year', 'Seats'"
      ],
      "metadata": {
        "id": "nkDBXXuBQBuy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Selecting final Predictors/Features for building Machine Learning/AI model\n",
        "Based on the extensive tests with exploratory data analysis, we can select the final features/predictors/columns for machine learning model building as:'Engine', 'Power', 'Year', 'Seats'"
      ],
      "metadata": {
        "id": "peKasVX1QLs6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "SelectedColumns=['Engine', 'Power', 'Year', 'Seats' ]\n",
        "\n",
        "# Selecting final columns\n",
        "DataForML=UsedCarData[SelectedColumns]\n",
        "DataForML.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y7m97WuWQWlR",
        "outputId": "38fd8568-42cc-4937-dd9c-89c3b49e4ec4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Engine  Power  Year  Seats\n",
              "0   998.0   58.0  2010    5.0\n",
              "1  1582.0  126.0  2015    5.0\n",
              "2  1199.0   88.0  2011    5.0\n",
              "3  1248.0   88.0  2012    7.0\n",
              "4  1968.0  140.0  2013    5.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2530db31-6a82-4385-a806-3233d5d5f365\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Year</th>\n",
              "      <th>Seats</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>998.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>2010</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1582.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>2015</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1199.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>2011</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1248.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>2012</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1968.0</td>\n",
              "      <td>140.0</td>\n",
              "      <td>2013</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2530db31-6a82-4385-a806-3233d5d5f365')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2530db31-6a82-4385-a806-3233d5d5f365 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2530db31-6a82-4385-a806-3233d5d5f365');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-dc83210e-263f-4c93-ac9f-4edef0216789\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dc83210e-263f-4c93-ac9f-4edef0216789')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-dc83210e-263f-4c93-ac9f-4edef0216789 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "DataForML",
              "summary": "{\n  \"name\": \"DataForML\",\n  \"rows\": 5872,\n  \"fields\": [\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 601.6417826175225,\n        \"min\": 624.0,\n        \"max\": 5998.0,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          5998.0,\n          2956.0,\n          2498.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.92430435727243,\n        \"min\": 34.0,\n        \"max\": 560.0,\n        \"num_unique_values\": 190,\n        \"samples\": [\n          48.0,\n          52.0,\n          169.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1998,\n        \"max\": 2019,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          2010,\n          2006,\n          2017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8050813299233973,\n        \"min\": 2.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.0,\n          2.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Saving this final data subset for reference during deployment\n",
        "DataForML.to_pickle('DataForML.pkl')"
      ],
      "metadata": {
        "id": "ffPBdRpY_aBY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 14: Data Pre-processing for Machine Learning Model Building or Model Development\n",
        " Converting each Ordinal Categorical columns to numeric\n",
        "* Converting Binary nominal Categorical columns to numeric using 1/0 mapping\n",
        "* Converting all other nominal categorical columns to numeric using pd.get_dummies()\n",
        "* Data Transformation (Optional): Standardization/Normalization/log/sqrt. Important if you are using distance based algorithms like KNN, or Neural Networks\n",
        "* Converting the ordinal variable to numeric - In this data there is no Ordinal categorical variable.\n",
        "* Converting the binary nominal variable to numeric using 1/0 mapping: There is no binary nominal variable in string format in this data"
      ],
      "metadata": {
        "id": "Sq04pmPt_gdH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Converting the nominal variable to numeric using get_dummies()"
      ],
      "metadata": {
        "id": "42BbBW_D_lku"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Treating all the nominal variables at once using dummy variables\n",
        "DataForML_Numeric=pd.get_dummies(DataForML)\n",
        "\n",
        "# Adding Target Variable to the data\n",
        "DataForML_Numeric['Price']=UsedCarData['Price']\n",
        "\n",
        "# Printing sample rows\n",
        "DataForML_Numeric.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZdI2uL5x_nED",
        "outputId": "5eff0ceb-37cf-47e4-c114-db2914df2656"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Engine  Power  Year  Seats  Price\n",
              "0   998.0   58.0  2010    5.0   1.75\n",
              "1  1582.0  126.0  2015    5.0  12.50\n",
              "2  1199.0   88.0  2011    5.0   4.50\n",
              "3  1248.0   88.0  2012    7.0   6.00\n",
              "4  1968.0  140.0  2013    5.0  17.74"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ff8cd89c-88bd-42ab-83b3-dba0046fc144\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Year</th>\n",
              "      <th>Seats</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>998.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>2010</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1582.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>2015</td>\n",
              "      <td>5.0</td>\n",
              "      <td>12.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1199.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>2011</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1248.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>2012</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1968.0</td>\n",
              "      <td>140.0</td>\n",
              "      <td>2013</td>\n",
              "      <td>5.0</td>\n",
              "      <td>17.74</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff8cd89c-88bd-42ab-83b3-dba0046fc144')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ff8cd89c-88bd-42ab-83b3-dba0046fc144 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ff8cd89c-88bd-42ab-83b3-dba0046fc144');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-97065f8f-d582-4d31-a3fb-5d4813d3d0cc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97065f8f-d582-4d31-a3fb-5d4813d3d0cc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-97065f8f-d582-4d31-a3fb-5d4813d3d0cc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "DataForML_Numeric",
              "summary": "{\n  \"name\": \"DataForML_Numeric\",\n  \"rows\": 5872,\n  \"fields\": [\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 601.6417826175225,\n        \"min\": 624.0,\n        \"max\": 5998.0,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          5998.0,\n          2956.0,\n          2498.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.92430435727243,\n        \"min\": 34.0,\n        \"max\": 560.0,\n        \"num_unique_values\": 190,\n        \"samples\": [\n          48.0,\n          52.0,\n          169.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1998,\n        \"max\": 2019,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          2010,\n          2006,\n          2017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8050813299233973,\n        \"min\": 2.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.0,\n          2.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.249453218099008,\n        \"min\": 0.44,\n        \"max\": 160.0,\n        \"num_unique_values\": 1364,\n        \"samples\": [\n          7.77,\n          16.9,\n          46.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 15: Machine Learning Model Development:"
      ],
      "metadata": {
        "id": "XTAYnsD1_7Bd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Printing all the column names for our reference\n",
        "DataForML_Numeric.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gzWiaaqmAIlN",
        "outputId": "8f9bf6cd-1132-4ea0-b74d-c02ee95f4e68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Engine', 'Power', 'Year', 'Seats', 'Price'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Separate Target Variable and Predictor Variables\n",
        "TargetVariable='Price'\n",
        "Predictors=['Engine', 'Power', 'Year', 'Seats']\n",
        "\n",
        "X=DataForML_Numeric[Predictors].values\n",
        "y=DataForML_Numeric[TargetVariable].values\n",
        "\n",
        "# Split the data into training and testing set\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=428)"
      ],
      "metadata": {
        "id": "eTnAtViSAN06"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 16: Standardization/Normalization of data"
      ],
      "metadata": {
        "id": "BRMSLU3mApQF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### Standardization of data ###\n",
        "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
        "# Choose either standardization or Normalization\n",
        "# On this data Min Max Normalization produced better results\n",
        "\n",
        "# Choose between standardization and MinMAx normalization\n",
        "#PredictorScaler=StandardScaler()\n",
        "PredictorScaler=MinMaxScaler()\n",
        "\n",
        "# Storing the fit object for later reference\n",
        "PredictorScalerFit=PredictorScaler.fit(X)\n",
        "\n",
        "# Generating the standardized values of X\n",
        "X=PredictorScalerFit.transform(X)\n",
        "\n",
        "# Split the data into training and testing set\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
      ],
      "metadata": {
        "id": "ASbZt1iYAqio"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Sanity check for the sampled data\n",
        "print(X_train.shape)\n",
        "print(y_train.shape)\n",
        "print(X_test.shape)\n",
        "print(y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tAS0fTUTAxzO",
        "outputId": "ca8db0bf-ad74-4176-8a6b-6e5359cfb472"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(4110, 4)\n",
            "(4110,)\n",
            "(1762, 4)\n",
            "(1762,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 17: Multiple Linear Regression Algorithm For ML/AI model building"
      ],
      "metadata": {
        "id": "p4zpJlZtA1d1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Adaboost (Boosting of multiple Decision Trees)\n",
        "from sklearn.ensemble import AdaBoostRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "# Choosing Decision Tree with 6 level as the weak learner\n",
        "DTR=DecisionTreeRegressor(max_depth=3)\n",
        "RegModel = AdaBoostRegressor(n_estimators=100, base_estimator=DTR ,learning_rate=0.04)\n",
        "\n",
        "# Printing all the parameters of Adaboost\n",
        "print(RegModel)\n",
        "\n",
        "# Creating the model on Training Data\n",
        "AB=RegModel.fit(X_train,y_train)\n",
        "prediction=AB.predict(X_test)\n",
        "\n",
        "from sklearn import metrics\n",
        "# Measuring Goodness of fit in Training data\n",
        "print('R2 Value:',metrics.r2_score(y_train, AB.predict(X_train)))\n",
        "\n",
        "# Plotting the feature importance for Top 10 most important columns\n",
        "%matplotlib inline\n",
        "feature_importances = pd.Series(AB.feature_importances_, index=Predictors)\n",
        "feature_importances.nlargest(10).plot(kind='barh')\n",
        "\n",
        "###########################################################################\n",
        "print('\\n##### Model Validation and Accuracy Calculations ##########')\n",
        "\n",
        "# Printing some sample values of prediction\n",
        "TestingDataResults=pd.DataFrame(data=X_test, columns=Predictors)\n",
        "TestingDataResults[TargetVariable]=y_test\n",
        "TestingDataResults[('Predicted'+TargetVariable)]=np.round(prediction)\n",
        "\n",
        "# Printing sample prediction values\n",
        "print(TestingDataResults.head())\n",
        "\n",
        "# Calculating the error for each row\n",
        "TestingDataResults['APE']=100 * ((abs(\n",
        "  TestingDataResults['Price']-TestingDataResults['PredictedPrice']))/TestingDataResults['Price'])\n",
        "\n",
        "MAPE=np.mean(TestingDataResults['APE'])\n",
        "MedianMAPE=np.median(TestingDataResults['APE'])\n",
        "\n",
        "Accuracy =100 - MAPE\n",
        "MedianAccuracy=100- MedianMAPE\n",
        "print('Mean Accuracy on test data:', Accuracy) # Can be negative sometimes due to outlier\n",
        "print('Median Accuracy on test data:', MedianAccuracy)\n",
        "\n",
        "\n",
        "# Defining a custom function to calculate accuracy\n",
        "# Make sure there are no zeros in the Target variable if you are using MAPE\n",
        "def Accuracy_Score(orig,pred):\n",
        "    MAPE = np.mean(100 * (np.abs(orig-pred)/orig))\n",
        "    #print('#'*70,'Accuracy:', 100-MAPE)\n",
        "    return(100-MAPE)\n",
        "\n",
        "# Custom Scoring MAPE calculation\n",
        "from sklearn.metrics import make_scorer\n",
        "custom_Scoring=make_scorer(Accuracy_Score, greater_is_better=True)\n",
        "\n",
        "# Importing cross validation function from sklearn\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# Running 10-Fold Cross validation on a given algorithm\n",
        "# Passing full data X and y because the K-fold will split the data and automatically choose train/test\n",
        "Accuracy_Values=cross_val_score(RegModel, X , y, cv=10, scoring=custom_Scoring)\n",
        "print('\\nAccuracy values for 10-fold Cross Validation:\\n',Accuracy_Values)\n",
        "print('\\nFinal Average Accuracy of the model:', round(Accuracy_Values.mean(),2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oj8D1v-nUcmX",
        "outputId": "8dbaaaf8-332e-48ff-a5be-13ea06199da3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AdaBoostRegressor(base_estimator=DecisionTreeRegressor(max_depth=3),\n",
            "                  learning_rate=0.04, n_estimators=100)\n",
            "R2 Value: 0.7664349238893948\n",
            "\n",
            "##### Model Validation and Accuracy Calculations ##########\n",
            "     Engine     Power      Year  Seats  Price  PredictedPrice\n",
            "0  0.440826  0.425856  0.571429  0.375  31.00            39.0\n",
            "1  0.289356  0.201521  0.809524  0.625  12.50            10.0\n",
            "2  0.250093  0.266160  0.809524  0.375  19.90            29.0\n",
            "3  0.116115  0.102662  0.952381  0.375   8.92             5.0\n",
            "4  0.255117  0.296578  0.666667  0.375  24.68            17.0\n",
            "Mean Accuracy on test data: 32.027281963013124\n",
            "Median Accuracy on test data: 64.86486486486487\n",
            "\n",
            "Accuracy values for 10-fold Cross Validation:\n",
            " [40.06444594 44.97368192 39.34149961 46.01214944 44.92173635 41.02522448\n",
            " 48.4616958  42.60155948 48.24719301 33.96778317]\n",
            "\n",
            "Final Average Accuracy of the model: 42.96\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# XGBoost Regressor"
      ],
      "metadata": {
        "id": "cOpSrWSiVb_b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Xtreme Gradient Boosting (XGBoost)\n",
        "from xgboost import XGBRegressor\n",
        "RegModel=XGBRegressor(max_depth=2,\n",
        "                      learning_rate=0.1,\n",
        "                      n_estimators=1000,\n",
        "                      objective='reg:linear',\n",
        "                      booster='gbtree')\n",
        "\n",
        "# Printing all the parameters of XGBoost\n",
        "print(RegModel)\n",
        "\n",
        "# Creating the model on Training Data\n",
        "XGB=RegModel.fit(X_train,y_train)\n",
        "prediction=XGB.predict(X_test)\n",
        "\n",
        "from sklearn import metrics\n",
        "# Measuring Goodness of fit in Training data\n",
        "print('R2 Value:',metrics.r2_score(y_train, XGB.predict(X_train)))\n",
        "\n",
        "# Plotting the feature importance for Top 10 most important columns\n",
        "%matplotlib inline\n",
        "feature_importances = pd.Series(XGB.feature_importances_, index=Predictors)\n",
        "feature_importances.nlargest(10).plot(kind='barh')\n",
        "###########################################################################\n",
        "print('\\n##### Model Validation and Accuracy Calculations ##########')\n",
        "\n",
        "# Printing some sample values of prediction\n",
        "TestingDataResults=pd.DataFrame(data=X_test, columns=Predictors)\n",
        "TestingDataResults[TargetVariable]=y_test\n",
        "TestingDataResults[('Predicted'+TargetVariable)]=np.round(prediction)\n",
        "\n",
        "# Printing sample prediction values\n",
        "print(TestingDataResults.head())\n",
        "\n",
        "# Calculating the error for each row\n",
        "TestingDataResults['APE']=100 * ((abs(\n",
        "  TestingDataResults['Price']-TestingDataResults['PredictedPrice']))/TestingDataResults['Price'])\n",
        "\n",
        "\n",
        "MAPE=np.mean(TestingDataResults['APE'])\n",
        "MedianMAPE=np.median(TestingDataResults['APE'])\n",
        "\n",
        "Accuracy =100 - MAPE\n",
        "MedianAccuracy=100- MedianMAPE\n",
        "print('Mean Accuracy on test data:', Accuracy) # Can be negative sometimes due to outlier\n",
        "print('Median Accuracy on test data:', MedianAccuracy)\n",
        "\n",
        "\n",
        "# Defining a custom function to calculate accuracy\n",
        "# Make sure there are no zeros in the Target variable if you are using MAPE\n",
        "def Accuracy_Score(orig,pred):\n",
        "    MAPE = np.mean(100 * (np.abs(orig-pred)/orig))\n",
        "    #print('#'*70,'Accuracy:', 100-MAPE)\n",
        "    return(100-MAPE)\n",
        "\n",
        "# Custom Scoring MAPE calculation\n",
        "from sklearn.metrics import make_scorer\n",
        "custom_Scoring=make_scorer(Accuracy_Score, greater_is_better=True)\n",
        "\n",
        "# Importing cross validation function from sklearn\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# Running 10-Fold Cross validation on a given algorithm\n",
        "# Passing full data X and y because the K-fold will split the data and automatically choose train/test\n",
        "Accuracy_Values=cross_val_score(RegModel, X , y, cv=10, scoring=custom_Scoring)\n",
        "print('\\nAccuracy values for 10-fold Cross Validation:\\n',Accuracy_Values)\n",
        "print('\\nFinal Average Accuracy of the model:', round(Accuracy_Values.mean(),2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TraAC2GMVeUD",
        "outputId": "08d66a69-1e8a-4447-f971-2e1e2c5ba039"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XGBRegressor(base_score=None, booster='gbtree', callbacks=None,\n",
            "             colsample_bylevel=None, colsample_bynode=None,\n",
            "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
            "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
            "             gamma=None, grow_policy=None, importance_type=None,\n",
            "             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
            "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
            "             max_delta_step=None, max_depth=2, max_leaves=None,\n",
            "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
            "             multi_strategy=None, n_estimators=1000, n_jobs=None,\n",
            "             num_parallel_tree=None, objective='reg:linear', ...)\n",
            "R2 Value: 0.9356677319754932\n",
            "\n",
            "##### Model Validation and Accuracy Calculations ##########\n",
            "     Engine     Power      Year  Seats  Price  PredictedPrice\n",
            "0  0.440826  0.425856  0.571429  0.375  31.00            18.0\n",
            "1  0.289356  0.201521  0.809524  0.625  12.50            11.0\n",
            "2  0.250093  0.266160  0.809524  0.375  19.90            26.0\n",
            "3  0.116115  0.102662  0.952381  0.375   8.92             9.0\n",
            "4  0.255117  0.296578  0.666667  0.375  24.68            14.0\n",
            "Mean Accuracy on test data: 74.48459508615557\n",
            "Median Accuracy on test data: 83.87638794752326\n",
            "\n",
            "Accuracy values for 10-fold Cross Validation:\n",
            " [76.07230403 78.46441157 76.16561734 79.15776064 79.36783217 71.30713121\n",
            " 79.10507036 80.20140711 79.38818939 77.11396629]\n",
            "\n",
            "Final Average Accuracy of the model: 77.63\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Plotting a single Decision tree out of XGBoost"
      ],
      "metadata": {
        "id": "YsZ3FYvEWUUq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Plotting a single Decision tree out of XGBoost\n",
        "from xgboost import plot_tree\n",
        "import matplotlib.pyplot as plt\n",
        "fig, ax = plt.subplots(figsize=(20, 8))\n",
        "plot_tree(XGB, num_trees=10, ax=ax)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MxMSSpdTWVac",
        "outputId": "8af6a022-215a-4bc0-af06-324b014edcbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# K-Nearest Neighbor(KNN)"
      ],
      "metadata": {
        "id": "0UzkPxASW3Hf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#kNN\n",
        "# K-Nearest Neighbor(KNN)\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "RegModel = KNeighborsRegressor(n_neighbors=3)\n",
        "\n",
        "# Printing all the parameters of KNN\n",
        "print(RegModel)\n",
        "\n",
        "# Creating the model on Training Data\n",
        "KNN=RegModel.fit(X_train,y_train)\n",
        "prediction=KNN.predict(X_test)\n",
        "\n",
        "from sklearn import metrics\n",
        "# Measuring Goodness of fit in Training data\n",
        "print('R2 Value:',metrics.r2_score(y_train, KNN.predict(X_train)))\n",
        "\n",
        "# Plotting the feature importance for Top 10 most important columns\n",
        "# The variable importance chart is not available for KNN\n",
        "\n",
        "###########################################################################\n",
        "print('\\n##### Model Validation and Accuracy Calculations ##########')\n",
        "\n",
        "# Printing some sample values of prediction\n",
        "TestingDataResults=pd.DataFrame(data=X_test, columns=Predictors)\n",
        "TestingDataResults[TargetVariable]=y_test\n",
        "TestingDataResults[('Predicted'+TargetVariable)]=np.round(prediction)\n",
        "\n",
        "# Printing sample prediction values\n",
        "print(TestingDataResults.head())\n",
        "\n",
        "# Calculating the error for each row\n",
        "TestingDataResults['APE']=100 * ((abs(\n",
        "  TestingDataResults['Price']-TestingDataResults['PredictedPrice']))/TestingDataResults['Price'])\n",
        "\n",
        "MAPE=np.mean(TestingDataResults['APE'])\n",
        "MedianMAPE=np.median(TestingDataResults['APE'])\n",
        "\n",
        "Accuracy =100 - MAPE\n",
        "MedianAccuracy=100- MedianMAPE\n",
        "print('Mean Accuracy on test data:', Accuracy) # Can be negative sometimes due to outlier\n",
        "print('Median Accuracy on test data:', MedianAccuracy)\n",
        "\n",
        "# Defining a custom function to calculate accuracy\n",
        "# Make sure there are no zeros in the Target variable if you are using MAPE\n",
        "def Accuracy_Score(orig,pred):\n",
        "    MAPE = np.mean(100 * (np.abs(orig-pred)/orig))\n",
        "    #print('#'*70,'Accuracy:', 100-MAPE)\n",
        "    return(100-MAPE)\n",
        "\n",
        "# Custom Scoring MAPE calculation\n",
        "from sklearn.metrics import make_scorer\n",
        "custom_Scoring=make_scorer(Accuracy_Score, greater_is_better=True)\n",
        "\n",
        "# Importing cross validation function from sklearn\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# Running 10-Fold Cross validation on a given algorithm\n",
        "# Passing full data X and y because the K-fold will split the data and automatically choose train/test\n",
        "Accuracy_Values=cross_val_score(RegModel, X , y, cv=10, scoring=custom_Scoring)\n",
        "print('\\nAccuracy values for 10-fold Cross Validation:\\n',Accuracy_Values)\n",
        "print('\\nFinal Average Accuracy of the model:', round(Accuracy_Values.mean(),2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rG9G8lPdW6p-",
        "outputId": "95f75da4-5aca-4216-d43e-e689cf9bdc47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KNeighborsRegressor(n_neighbors=3)\n",
            "R2 Value: 0.9349193055201167\n",
            "\n",
            "##### Model Validation and Accuracy Calculations ##########\n",
            "     Engine     Power      Year  Seats  Price  PredictedPrice\n",
            "0  0.440826  0.425856  0.571429  0.375  31.00            15.0\n",
            "1  0.289356  0.201521  0.809524  0.625  12.50            12.0\n",
            "2  0.250093  0.266160  0.809524  0.375  19.90            30.0\n",
            "3  0.116115  0.102662  0.952381  0.375   8.92             9.0\n",
            "4  0.255117  0.296578  0.666667  0.375  24.68            14.0\n",
            "Mean Accuracy on test data: 73.1488831700647\n",
            "Median Accuracy on test data: 83.14932371693641\n",
            "\n",
            "Accuracy values for 10-fold Cross Validation:\n",
            " [76.6291062  78.37992593 76.45740899 76.63988192 80.81815609 70.10674034\n",
            " 77.50836819 77.50231811 79.44959946 77.79442809]\n",
            "\n",
            "Final Average Accuracy of the model: 77.13\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Support Vector Machine (SVM) Regressor"
      ],
      "metadata": {
        "id": "QZkTwzFuXpR1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Support Vector Machines(SVM)\n",
        "from sklearn import svm\n",
        "RegModel = svm.SVR(C=50, kernel='rbf', gamma=0.01)\n",
        "\n",
        "# Printing all the parameters\n",
        "print(RegModel)\n",
        "\n",
        "# Creating the model on Training Data\n",
        "SVM=RegModel.fit(X_train,y_train)\n",
        "prediction=SVM.predict(X_test)\n",
        "\n",
        "from sklearn import metrics\n",
        "# Measuring Goodness of fit in Training data\n",
        "print('R2 Value:',metrics.r2_score(y_train, SVM.predict(X_train)))\n",
        "\n",
        "# Plotting the feature importance for Top 10 most important columns\n",
        "# The built in attribute SVM.coef_ works only for linear kernel\n",
        "%matplotlib inline\n",
        "#feature_importances = pd.Series(SVM.coef_[0], index=Predictors)\n",
        "#feature_importances.nlargest(10).plot(kind='barh')\n",
        "\n",
        "###########################################################################\n",
        "print('\\n##### Model Validation and Accuracy Calculations ##########')\n",
        "\n",
        "# Printing some sample values of prediction\n",
        "TestingDataResults=pd.DataFrame(data=X_test, columns=Predictors)\n",
        "TestingDataResults[TargetVariable]=y_test\n",
        "TestingDataResults[('Predicted'+TargetVariable)]=np.round(prediction)\n",
        "\n",
        "# Printing sample prediction values\n",
        "print(TestingDataResults.head())\n",
        "\n",
        "# Calculating the error for each row\n",
        "TestingDataResults['APE']=100 * ((abs(\n",
        "  TestingDataResults['Price']-TestingDataResults['PredictedPrice']))/TestingDataResults['Price'])\n",
        "\n",
        "MAPE=np.mean(TestingDataResults['APE'])\n",
        "MedianMAPE=np.median(TestingDataResults['APE'])\n",
        "\n",
        "Accuracy =100 - MAPE\n",
        "MedianAccuracy=100- MedianMAPE\n",
        "print('Mean Accuracy on test data:', Accuracy) # Can be negative sometimes due to outlier\n",
        "print('Median Accuracy on test data:', MedianAccuracy)\n",
        "\n",
        "# Defining a custom function to calculate accuracy\n",
        "# Make sure there are no zeros in the Target variable if you are using MAPE\n",
        "def Accuracy_Score(orig,pred):\n",
        "    MAPE = np.mean(100 * (np.abs(orig-pred)/orig))\n",
        "    #print('#'*70,'Accuracy:', 100-MAPE)\n",
        "    return(100-MAPE)\n",
        "\n",
        "# Custom Scoring MAPE calculation\n",
        "from sklearn.metrics import make_scorer\n",
        "custom_Scoring=make_scorer(Accuracy_Score, greater_is_better=True)\n",
        "\n",
        "# Importing cross validation function from sklearn\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# Running 10-Fold Cross validation on a given algorithm\n",
        "# Passing full data X and y because the K-fold will split the data and automatically choose train/test\n",
        "Accuracy_Values=cross_val_score(RegModel, X , y, cv=10, scoring=custom_Scoring)\n",
        "print('\\nAccuracy values for 10-fold Cross Validation:\\n',Accuracy_Values)\n",
        "print('\\nFinal Average Accuracy of the model:', round(Accuracy_Values.mean(),2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c-Fzp2iSXqR4",
        "outputId": "de99cb6f-702e-440a-8eaf-f077cc8eac0c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVR(C=50, gamma=0.01)\n",
            "R2 Value: 0.5802012572042967\n",
            "\n",
            "##### Model Validation and Accuracy Calculations ##########\n",
            "     Engine     Power      Year  Seats  Price  PredictedPrice\n",
            "0  0.440826  0.425856  0.571429  0.375  31.00            21.0\n",
            "1  0.289356  0.201521  0.809524  0.625  12.50            12.0\n",
            "2  0.250093  0.266160  0.809524  0.375  19.90            15.0\n",
            "3  0.116115  0.102662  0.952381  0.375   8.92             8.0\n",
            "4  0.255117  0.296578  0.666667  0.375  24.68            14.0\n",
            "Mean Accuracy on test data: 53.93171324316134\n",
            "Median Accuracy on test data: 72.8368677259709\n",
            "\n",
            "Accuracy values for 10-fold Cross Validation:\n",
            " [52.20222214 59.37432482 52.55434301 57.66440712 57.68140095 51.23720219\n",
            " 55.16345441 53.48962602 57.86110588 48.83427294]\n",
            "\n",
            "Final Average Accuracy of the model: 54.61\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 18: Model Deployment"
      ],
      "metadata": {
        "id": "Ux2lRwpEYKG3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Separate Target Variable and Predictor Variables\n",
        "TargetVariable='Price'\n",
        "\n",
        "# Selecting the final set of predictors for the deployment\n",
        "# Based on the variable importance charts of multiple algorithms above\n",
        "Predictors=['Engine', 'Power']\n",
        "\n",
        "X=DataForML_Numeric[Predictors].values\n",
        "y=DataForML_Numeric[TargetVariable].values\n",
        "\n",
        "### Sandardization of data ###\n",
        "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
        "# Choose either standardization or Normalization\n",
        "# On this data Min Max Normalization produced better results\n",
        "\n",
        "# Choose between standardization and MinMAx normalization\n",
        "#PredictorScaler=StandardScaler()\n",
        "PredictorScaler=MinMaxScaler()\n",
        "\n",
        "# Storing the fit object for later reference\n",
        "PredictorScalerFit=PredictorScaler.fit(X)\n",
        "\n",
        "# Generating the standardized values of X\n",
        "X=PredictorScalerFit.transform(X)\n",
        "\n",
        "print(X.shape)\n",
        "print(y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aC5RrwGMYM9a",
        "outputId": "fbc6e263-6a64-471e-d8ce-59aa386d8a44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(5872, 2)\n",
            "(5872,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Cross validating the final model accuracy with less predictors"
      ],
      "metadata": {
        "id": "aApFA5ayaLZH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing cross validation function from sklearn\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# choose from different tunable hyper parameters\n",
        "from xgboost import XGBRegressor\n",
        "RegModel=XGBRegressor(max_depth=2,\n",
        "                      learning_rate=0.1,\n",
        "                      n_estimators=1000,\n",
        "                      objective='reg:linear',\n",
        "                      booster='gbtree')\n",
        "\n",
        "# Running 10-Fold Cross validation on a given algorithm\n",
        "# Passing full data X and y because the K-fold will split the data and automatically choose train/test\n",
        "Accuracy_Values=cross_val_score(RegModel, X , y, cv=10, scoring=custom_Scoring)\n",
        "print('\\nAccuracy values for 10-fold Cross Validation:\\n',Accuracy_Values)\n",
        "print('\\nFinal Average Accuracy of the model:', round(Accuracy_Values.mean(),2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N-Rh15sJaN8W",
        "outputId": "3fcf38e3-768b-4ab6-a67a-67c575f9114a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Accuracy values for 10-fold Cross Validation:\n",
            " [57.62740086 60.32491645 56.58362729 63.93906819 62.23323036 57.66156747\n",
            " 63.14155693 57.91647166 60.67271689 53.61957745]\n",
            "\n",
            "Final Average Accuracy of the model: 59.37\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 22: Retraining the final model using 100% data"
      ],
      "metadata": {
        "id": "I-afftAIaXFy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Training the model on 100% Data available\n",
        "Final_XGB_Model=RegModel.fit(X,y)"
      ],
      "metadata": {
        "id": "aP7haoaWaYIL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 23: Save the model as a serialized file which can be stored anywhere"
      ],
      "metadata": {
        "id": "JmoBhbzxacNJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "import os\n",
        "\n",
        "# Saving the Python objects as serialized files can be done using pickle library\n",
        "# Here let us save the Final model\n",
        "with open('Final_XGB_Model.pkl', 'wb') as fileWriteStream:\n",
        "    pickle.dump(Final_XGB_Model, fileWriteStream)\n",
        "    # Don't forget to close the filestream!\n",
        "    fileWriteStream.close()\n",
        "\n",
        "print('pickle file of Predictive Model is saved at Location:',os.getcwd())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oSEYipSNadNs",
        "outputId": "fdf6fa65-cded-4a8a-d99e-1f813981d4c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pickle file of Predictive Model is saved at Location: /content/drive/MyDrive/Capstone project\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 24: Create a python function"
      ],
      "metadata": {
        "id": "HqLrbqGCbmw-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from re import IGNORECASE\n",
        "# This Function can be called from any from any front end tool/website\n",
        "\n",
        "def FunctionPredictResult(InputData):\n",
        "    import pandas as pd\n",
        "    Num_Inputs=InputData.shape[0]\n",
        "\n",
        "    # Making sure the input data has same columns as it was used for training the model\n",
        "    # Also, if standardization/normalization was done, then same must be done for new input\n",
        "\n",
        "    # Appending the new data with the Training data\n",
        "    DataForML=pd.read_pickle('DataForML.pkl')\n",
        "    #InputData=InputData.append(DataForML, ignore_index=True)\n",
        "    InputData = pd.concat([InputData, DataForML], ignore_index=True)\n",
        "\n",
        "    # Generating dummy variables for rest of the nominal variables\n",
        "    InputData=pd.get_dummies(InputData)\n",
        "\n",
        "    # Maintaining the same order of columns as it was during the model training\n",
        "    Predictors=['Engine', 'Power']\n",
        "\n",
        "    # Generating the input values to the model\n",
        "    X=InputData[Predictors].values[0:Num_Inputs]\n",
        "\n",
        "    # Generating the standardized values of X since it was done while model training also\n",
        "    X=PredictorScalerFit.transform(X)\n",
        "\n",
        "    # Loading the Function from pickle file\n",
        "    import pickle\n",
        "    with open('Final_XGB_Model.pkl', 'rb') as fileReadStream:\n",
        "        PredictionModel=pickle.load(fileReadStream)\n",
        "        # Don't forget to close the filestream!\n",
        "        fileReadStream.close()\n",
        "\n",
        "    # Genrating Predictions\n",
        "    Prediction=PredictionModel.predict(X)\n",
        "    PredictionResult=pd.DataFrame(Prediction, columns=['Prediction'])\n",
        "    return(PredictionResult)"
      ],
      "metadata": {
        "id": "pw7pHsNzbnmn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 25: Calling the function for some new data"
      ],
      "metadata": {
        "id": "aR6WzS3sb0zp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calling the function for some new data\n",
        "NewSampleData=pd.DataFrame(data=[[4.98,6.575],[4.98,3.2]],columns=['Engine', 'Power'])\n",
        "\n",
        "print(NewSampleData)\n",
        "\n",
        "# Calling the Function for prediction\n",
        "FunctionPredictResult(InputData=NewSampleData)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WNv6jcf4b1iC",
        "outputId": "b99e3b72-54a5-497e-9416-d5a9b3456eb7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Engine  Power\n",
            "0    4.98  6.575\n",
            "1    4.98  3.200\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Prediction\n",
              "0    2.295144\n",
              "1    2.295144"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c7421c4b-aa5c-447a-8ffc-5ef6f4e23730\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.295144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.295144</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c7421c4b-aa5c-447a-8ffc-5ef6f4e23730')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c7421c4b-aa5c-447a-8ffc-5ef6f4e23730 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c7421c4b-aa5c-447a-8ffc-5ef6f4e23730');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-16e16cf3-7ab3-499a-be26-e0e4cab97bd2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-16e16cf3-7ab3-499a-be26-e0e4cab97bd2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-16e16cf3-7ab3-499a-be26-e0e4cab97bd2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"FunctionPredictResult(InputData=NewSampleData)\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Prediction\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.2951438426971436\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Conclusion\n",
        "* the Function FunctionPredictResult() is used to generate the predictions for just one or several new cases at once."
      ],
      "metadata": {
        "id": "zqv8Deh-fa2d"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Deploying a predictive model as an API\n",
        "* Django and flask are two popular ways to deploy predictive models as a web service\n",
        "* You can call your predictive models using a URL from any front end like tableau, java or angular js\n"
      ],
      "metadata": {
        "id": "v-IV6ft2ff7r"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Deploying the model with few parameters\n",
        "# Function for predictions API"
      ],
      "metadata": {
        "id": "-gbvbK4hfiXJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating the function which can take inputs and return prediction\n",
        "def FunctionGeneratePrediction(inp_Engine , inp_Power):\n",
        "\n",
        "    # Creating a data frame for the model input\n",
        "    SampleInputData=pd.DataFrame(\n",
        "     data=[[inp_Engine, inp_Power]],\n",
        "     columns=['Engine', 'Power'])\n",
        "\n",
        "    # Calling the function defined above using the input parameters\n",
        "    Predictions=FunctionPredictResult(InputData= SampleInputData)\n",
        "\n",
        "    # Returning the predictions\n",
        "    return(Predictions.to_json())\n",
        "\n",
        "# Function call\n",
        "FunctionGeneratePrediction( inp_Engine=4.98,\n",
        "                           inp_Power=6.5)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-ASV_WiefkjP",
        "outputId": "cfbf2787-0e1b-4f41-d399-c0ef14a5b52b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'{\"Prediction\":{\"0\":2.2951438427}}'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "mGB4T4k4gdW3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Web Deployment using Flask Library/Package\n",
        "# Installing the flask library required to create the API\n"
      ],
      "metadata": {
        "id": "xZQ8tEb7V5Z7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install flask"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qqQPrxa0rYLf",
        "outputId": "e3e3f1b0-500c-43a5-81cb-be1292b23353"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: flask in /usr/local/lib/python3.10/dist-packages (2.2.5)\n",
            "Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from flask) (3.0.2)\n",
            "Requirement already satisfied: Jinja2>=3.0 in /usr/local/lib/python3.10/dist-packages (from flask) (3.1.3)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from flask) (2.2.0)\n",
            "Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from flask) (8.1.7)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=3.0->flask) (2.1.5)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Creating Flask API"
      ],
      "metadata": {
        "id": "NUwDu6ihrkQD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from flask import Flask, request, jsonify\n",
        "import pickle\n",
        "import pandas as pd\n",
        "import numpy"
      ],
      "metadata": {
        "id": "dg3p_Rn2rlUD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "app = Flask(__name__)\n",
        "\n",
        "@app.route('/prediction_api', methods=[\"GET\"])\n",
        "def prediction_api():\n",
        "    try:\n",
        "        # Getting the paramters from API call\n",
        "        LSTAT_value = float(request.args.get('Engine'))\n",
        "        RM_value=float(request.args.get('Power'))\n",
        "\n",
        "        # Calling the funtion to get predictions\n",
        "        prediction_from_api=FunctionGeneratePrediction(\n",
        "                                                       inp_Engine=Engine_value,\n",
        "                                                       inp_Power=Power_value,\n",
        "\n",
        "                                                )\n",
        "\n",
        "        return (prediction_from_api)\n",
        "\n",
        "    except Exception as e:\n",
        "        return('Something is not right!:'+str(e))"
      ],
      "metadata": {
        "id": "QmZneRFertyA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Starting the API engine"
      ],
      "metadata": {
        "id": "A_lgALPzrxs0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "if __name__ ==\"__main__\":\n",
        "\n",
        "    # Hosting the API in localhost\n",
        "    app.run(host='127.0.0.1', port=9000, threaded=True, debug=True, use_reloader=False)\n",
        "    # Interrupt kernel to stop the API"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z8N_e7SMryk_",
        "outputId": "ab8b862c-9ed3-4333-8e35-40a7be532f86"
      },
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            " * Serving Flask app '__main__'\n",
            " * Debug mode: on\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n",
            " * Running on http://127.0.0.1:9000\n",
            "INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Desktop App deployment: Tkinter package"
      ],
      "metadata": {
        "id": "0mJM3_bp0RQI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tkinter as tk\n",
        "from tkinter import messagebox\n",
        "from tkinter import ttk\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from xgboost import XGBRegressor\n",
        "\n",
        "class HousePricePredictionApp:\n",
        "    def __init__(self, master):\n",
        "        self.master = master\n",
        "        self.master.title('UsedCar Price Prediction')\n",
        "        self.data = pd.read_csv('train-data.csv')\n",
        "        self.sliders = []\n",
        "\n",
        "        self.X = self.data.drop('Price', axis=1).values\n",
        "        self.y = self.data['Price'].values\n",
        "\n",
        "        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.X, self.y, test_size=0.2, random_state=42)\n",
        "\n",
        "        self.model = XGBRegressor()\n",
        "        self.model.fit(self.X_train, self.y_train)\n",
        "\n",
        "        self.create_widgets()\n",
        "\n",
        "    def create_widgets(self):\n",
        "        for i, column in enumerate(self.data.columns[:-1]):\n",
        "            label = tk.Label(self.master, text=column + ': ')\n",
        "            label.grid(row=i, column=0)\n",
        "            current_val_label = tk.Label(self.master, text='0.0')\n",
        "            current_val_label.grid(row=i, column=2)\n",
        "            slider = ttk.Scale(self.master, from_=self.data[column].min(), to=self.data[column].max(), orient=\"horizontal\",\n",
        "                               command=lambda val, label=current_val_label: label.config(text=f'{float(val):.2f}'))\n",
        "            slider.grid(row=i, column=1)\n",
        "            self.sliders.append((slider, current_val_label))\n",
        "\n",
        "        predict_button = tk.Button(self.master, text='Predict Price', command=self.predict_price)\n",
        "        predict_button.grid(row=len(self.data.columns[:-1]), columnspan=3)\n",
        "\n",
        "    def predict_price(self):\n",
        "        inputs = [float(slider.get()) for slider, _ in self.sliders]\n",
        "        price = self.model.predict([inputs])\n",
        "        messagebox.showinfo('Predicted Price', f'The predicted UsedCar price is ${price[0]:.2f}')\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    root = tk.Tk()\n",
        "    app = UsedCarDataPricePredictionApp(root)\n",
        "    root.mainloop()"
      ],
      "metadata": {
        "id": "p6IrHHj50IxM"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}